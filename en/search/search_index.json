{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This solution allows you to quickly deploy a Keycloak cluster on Amazon Web Services Cloud. Keycloak is an Open Source Identity and Access Management solution for modern Applications and Services. Providing a customizable user interface, Keycloak supports use cases such as Single Sign-On (SSO), user registration, and user federation. You can configure Keycloak to integrate with Active Directory and LDAP. You can also set up Keycloak to delegate authentication to third-party identity providers.</p> <p>This solution mainly includes the following features:</p> <ul> <li> <p>Single-Sign On: supports standard protocols such as OpenID Connect, OAuth 2.0, and SAML 2.0.</p> </li> <li> <p>Identity and Access Management: provides user federation, strong authentication, user management, fine-grained authorization, and so on. Authentication can be added to applications and services without having to deal with storing users or authenticating users.</p> </li> </ul>"},{"location":"#terminology","title":"Terminology","text":"<p>The following table lists the terminologies related to this solution.</p> Terminology Full Name Description SSO Single-Sign On Single sign-on (SSO) is an authentication scheme that allows a user to log in with a single ID to any of several related, yet independent, software systems. SAML Security Assertion Markup Language Security Assertion Markup Language is an open standard for exchanging authentication and authorization data between parties, in particular, between an identity provider and a service provider. SAML is an XML-based markup language for security assertions (statements that service providers use to make access-control decisions). OAuth Open Authorization Open Authorization is an open standard for access delegation, commonly used as a way for internet users to grant websites or applications access to their information on other websites but without giving them the passwords. OpenID OpenID OpenID is an open standard and decentralized authentication protocol promoted by the non-profit OpenID Foundation. For more information, refer to OpenID Connect. ICP Internet Content Provider ICP license is a permit issued by the Chinese Ministry of Industry and Information Technology (MIIT) to permit China-based websites to operate in China. JWT JSON Web Token JSON Web Token is a proposed Internet standard for creating data with optional signature and/or optional encryption whose payload holds JSON that asserts some number of claims. The tokens are signed either using a private secret or a public/private key. LDAP Lightweight Directory Access Protocol The Lightweight Directory Access Protocol is an open, vendor-neutral, industry standard application protocol for accessing and maintaining distributed directory information services over an Internet Protocol (IP) network. AD Active Directory Active Directory is a directory service developed by Microsoft for Windows domain networks. It is included in most Windows Server operating systems as a set of processes and services. <p>This implementation guide describes architectural considerations and configuration steps for deploying the Keycloak solution in the AWS cloud. It includes links to CloudFormation templates that launches and configures the AWS services required to deploy this solution using AWS best practices for security and availability.</p> <p>The guide is intended for IT architects, developers, DevOps with practical experience architecting in the AWS Cloud.</p>"},{"location":"implementation-guide/additional-resources/","title":"AWS Services","text":"<ul> <li>AWS CloudFormation</li> <li>Amazon ECS</li> <li>Amazon ECR</li> <li>Amazon Certificate Manager (ACM)</li> <li>AWS Identity and Access Management (IAM)</li> <li>Amazon Route 53</li> <li>Amazon Aurora</li> <li>AWS Secrets Manager</li> <li>Application Load Balancer</li> <li>AWS Fargate</li> </ul>"},{"location":"implementation-guide/architecture/","title":"Architecture overview","text":"<p>Deploying this solution with the default parameters builds the following environment in the AWS Cloud.</p> <p></p> <p>Figure 1: Solution architecture</p> <p>This solution deploys the AWS CloudFormation template in your AWS Cloud account and completes the following settings.</p> <ul> <li>A highly available architecture that spans two Availability Zones.</li> <li>A Amazon Virtual Private Cloud (Amazon VPC) configured with public and private subnets, according to AWS best practices, to provide you with your own virtual network on AWS.</li> <li>In the public subnets, managed Network Address Translation (NAT) gateways to allow outbound internet access for resources in the private subnets.</li> <li>In the private subnets:<ul> <li>Amazon Elastic Container Service (Amazon ECS) tasks running with AWS Fargate behind the Application Load Balancer.</li> <li>Amazon Aurora Serverless MySQL-Compatible database cluster or Amazon Aurora MySQL-Compatible cluster.</li> </ul> </li> <li>IAM role for the Amazon ECS service.</li> <li>Secrets from AWS Secrets Manager for Keycloak console login and database connection.</li> <li>AWS Certificate Manager (ACM), which uses your existing certificate for the custom domain name on the Application Load Balancer.</li> <li>Amazon Route 53 alias record, which is required for the custom domain name.</li> </ul>"},{"location":"implementation-guide/considerations/","title":"Considerations","text":""},{"location":"implementation-guide/considerations/#regional-deployments","title":"Regional deployments","text":"<p>This solution uses services which may not be currently available in all AWS Regions. Launch this solution in an AWS Region where required services are available. For the most current availability by Region, refer to the AWS Regional Services List. </p> <p>Because the solution has Amazon Aurora MySQL-Compatible, Amazon Aurora Serverless v1 MySQL-Compatible and Amazon Aurora Serverless v2 MySQL-Compatible to choose from, when deploying with CloudFormation, you need to check whether the region supports your choice.</p> <p>For Aurora Serverless deployments, Aurora Serverless v2 MySQL-Compatible is provided by default in the CloudFormation templates. Aurora Serverless v2 scales more quickly and in a more granular way and also has more compatibility with other Aurora features such as reader DB instances. For more information, see Comparison of Aurora Serverless v2 and Aurora Serverless v1 requirements.</p> <p>Supported regions for database deployment in AWS Global Regions</p> Region ID Region Name Amazon Aurora MySQL-Compatible Amazon Aurora Serverless v1 MySQL-Compatible Amazon Aurora Serverless v2 MySQL-Compatible us-east-1 US East (N. Virginia) \u2714 \u2714 \u2714 us-east-2 US East (Ohio) \u2714 \u2714 \u2714 us-west-1 US West (N. California) \u2714 \u2714 \u2714 us-west-2 US West (Oregon) \u2714 \u2714 \u2714 af-south-1 Africa (Cape Town) \u2714 \u2714 ap-east-1 Asia Pacific (Hongkong) \u2714 \u2714 ap-south-2 Asia Pacific (Hyderabad) \u2714 \u2714 ap-southeast-3 Asia Pacific (Jakarta) \u2714 \u2714 ap-southeast-4 Asia Pacific (Melbourne) \u2714 \u2714 ap-south-1 Asia Pacific (Mumbai) \u2714 \u2714 \u2714 ap-northeast-3 Asia Pacific (Osaka) \u2714 \u2714 ap-northeast-2 Asia Pacific (Seoul) \u2714 \u2714 \u2714 ap-southeast-1 Asia Pacific (Singapore) \u2714 \u2714 \u2714 ap-southeast-2 Asia Pacific (Sydney) \u2714 \u2714 \u2714 ap-northeast-1 Asia Pacific (Tokyo) \u2714 \u2714 \u2714 ca-central-1 Canada (Central) \u2714 \u2714 \u2714 eu-central-1 Europe (Frankfurt) \u2714 \u2714 \u2714 eu-west-1 Europe (Ireland) \u2714 \u2714 \u2714 eu-west-2 Europe (London) \u2714 \u2714 \u2714 eu-south-1 Europe (Milan) \u2714 \u2714 eu-west-3 Europe (Paris) \u2714 \u2714 \u2714 eu-south-2 Europe (Spain) \u2714 \u2714 eu-north-1 Europe (Stockholm) \u2714 \u2714 eu-central-2 Europe (Zurich) \u2714 \u2714 il-central-1 Israel (Tel Aviv) \u2714 \u2714 me-south-1 Middle East (Bahrain) \u2714 \u2714 me-central-1 Middle East (UAE) \u2714 \u2714 sa-east-1 South America (Sao Paulo) \u2714 \u2714 <p>Supported regions for database deployment in AWS China Regions</p> Region ID Region Name Amazon Aurora MySQL-Compatible Amazon Aurora Serverless v1 MySQL-Compatible Amazon Aurora Serverless v2 MySQL-Compatible cn-north-1 China (Beijing) Region Operated by Sinnet \u2714 \u2714 cn-northwest-1 China (Ningxia) Region Operated by NWCD \u2714 \u2714 \u2714"},{"location":"implementation-guide/cost/","title":"Cost Estimation","text":"<p>You will be responsible for the cost of using each of the AWS services when running the solution. As of July 2022, the main factors affecting the solution cost include:</p> <ul> <li>AWS Fargate</li> <li>Amazon Aurora MySQL-Compatible</li> <li>Application Load Balancer</li> </ul>"},{"location":"implementation-guide/cost/#example-1","title":"Example 1","text":"<p>Your database instance uses Amazon Aurora MySQL-Compatible, with Multi-AZ deployment option, OnDemand pricing model. The monthly cost of using this solution in the US East (N. Virginia) region is shown below:</p> Service Dimensions Cost (MLY) AWS Fargate 1. 2 ECS Tasks that run for 24 hours every day.  2. Each ECS task uses 1 vCPU, 2GB memory, and 20GB ephemeral storage. $ 72.08 Amazon Aurora MySQL-Compatible 1. Use db.t3.medium (2 vCPU, 4 GB memory).  2. A Multi-AZ DB cluster has a writer DB instance and a reader DB instances in two separate Availability Zones in the same AWS Region.  3. Pricing model is OnDemand.  4. 50GB General Purpose SSD (gp2) storage.  5. 30 Baseline IO rate per second, 100 Peak IO rate per second, and 60 Duration of peak IO activity hours per month. $ 143.51 Application Load Balancer 1. 100 GB per month for EC2 Instances and IP addresses as targets.  2. Average 40 new connections per second. $ 25.77 Total $ 241.36"},{"location":"implementation-guide/cost/#example-2","title":"Example 2","text":"<p>Your database instance uses Amazon Aurora MySQL-Compatible, with Multi-AZ deployment option, reserved (1 year) pricing model. The monthly cost of using this solution in the US East (N. Virginia) region is shown below:</p> Service Dimensions Cost (MLY) AWS Fargate 1. 2 ECS Tasks that run for 24 hours every day.  2. Each ECS task uses 1 vCPU, 2GB memory, and 20GB ephemeral storage. $ 72.08 Amazon Aurora MySQL-Compatible 1. Use db.t3.medium (2 vCPU, 4 GB memory).  2. A Multi-AZ DB cluster has a writer DB instance and a reader DB instances in two separate Availability Zones in the same AWS Region.  3. Pricing model is Reserved (1 year), purchase Option is All Upfront.  4. 50GB General Purpose SSD (gp2) storage, 30 Baseline IO rate per second, 100 Peak IO rate per second, and 60 Duration of peak IO activity hours per month. $ 103.12 Application Load Balancer 1. 100 GB per month for EC2 Instances and IP addresses as targets.  2. Average 40 new connections per second. $ 25.77 Total $ 200.97"},{"location":"implementation-guide/cost/#example-3","title":"Example 3","text":"<p>Your database instance use Amazon Aurora Serverless MySQL-Compatible. The monthly cost of using this solution in the US East (N. Virginia) region is shown below:</p> Service Dimensions Cost (MLY) AWS Fargate 1. 2 ECS Tasks that run for 24 hours every day.  2. Each ECS task uses 1 vCPU, 2GB memory, and 20GB ephemeral storage. $ 72.08 Amazon Aurora Serverless MySQL-Compatible 1. 12 ACUs per day.  2. 50GB database storage.  3. 30 Baseline IO rate per second, 100 Peak IO rate per second, and 60 Duration of peak IO activity hours per month. $ 67.59 Application Load Balancer 1. 100 GB per month for EC2 Instances and IP addresses as targets.  2. Average 40 new connections per second. $ 25.77 Total $ 165.44"},{"location":"implementation-guide/deployment/","title":"Deployment","text":"<p>Before you launch the solution, review the architecture, supported regions, and other considerations discussed in this guide. Follow the step-by-step instructions in this section to configure and deploy the solution into your account.</p> <p>Time to deploy: Approximately 30 minutes</p>"},{"location":"implementation-guide/deployment/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the following in the target region you want to deploy the solution:</p> <ul> <li>for deployments in China region, the domain name has been recorded by ICP and used to apply for ACM certificate.</li> <li>the certificate of the domain name is created in ACM and verified by the domain name.</li> <li>VPC with 4 subnets (including two public subnets and two private subnets) and NAT Gateway.</li> <li>all the AWS Services listed in required AWS Services are available.</li> </ul>"},{"location":"implementation-guide/deployment/#deployment-overview","title":"Deployment Overview","text":"<p>Use the following steps to deploy this solution on AWS.</p> <p>Step 1. Create ACM certificate</p> <p>Step 2. Validate domain ownership</p> <p>Step 3. Launch the stack</p> <p>Step 4. Create a record in Route 53 for resolving the domain name</p> <p>Step 5. Access the Keycloak web console</p>"},{"location":"implementation-guide/deployment/#step-1-create-acm-certificate","title":"Step 1. Create ACM certificate","text":"<p>Keycloak is required to provide HTTPS service to ensure that Keycloak can connect to the Cognito Identity pool. This means that an ACM certificate or a third-party certificate must be used. For more information, refer to How to upload an SSL certificate and import it into AWS Identity and Access Management (IAM).</p> <p>This guide illustrates the use of AWS Certificate Manager (ACM) as an example. For more information, refer to AWS Certificate Manager.</p> <ol> <li> <p>Log in to the AWS Certificate Manager console.</p> </li> <li> <p>From the top navigation bar, select a Region where you want to deploy Keycloak.</p> </li> <li> <p>In the left navigation pane, choose List certificates.</p> </li> <li> <p>Choose Request.</p> </li> <li> <p>If you choose to deploy in the AWS Global Regions, choose Request Public certificate. If you choose to deploy in the AWS China Regions, only the option Request Public certificate is available, choose it. Then, choose Next.</p> </li> <li> <p>On the Request Public certificate page, do the following:</p> <ol> <li>In the Domain names section, enter your domain name for your Keycloak service, such as keycloak.yourdomain.com.</li> <li>In the Select validation method section, choose DNS validation - recommended.</li> </ol> </li> <li> <p>Choose Request.</p> </li> <li> <p>In the Certificates list, the Status of the new requested Certificate ID is Pending validation.</p> </li> <li> <p>Choose the new requested Certificate ID to show detailed metadata for a listed certificate. </p> </li> <li> <p>In the page that Log in tos, record the following information:</p> <ol> <li>ARN in the Certificate status section.</li> <li>CNAME name in the Domains section.</li> <li>CNAME value in the Domains section.</li> </ol> </li> </ol>"},{"location":"implementation-guide/deployment/#step-2-validate-domain-ownership","title":"Step 2. Validate domain ownership","text":"<p>NOTE: The following is to verify domain ownership through Route 53. If you use other Domain Name System (DNS), refer to the DNS provider documentation to verify your domain name ownership.</p> <p>Add a CNAME record to Route 53 to authenticate that the domain name is owned and available to you. If no hosted zone has been created, refer to Configuring Amazon Route 53 as your DNS service.</p> <ol> <li> <p>Log in to the Amazon Route 53 console.</p> </li> <li> <p>In the left navigation pane, choose Hosted zones.</p> </li> <li> <p>Choose Domain name to show detailed metadata for a listed Hosted zones. </p> </li> <li> <p>In the page that Log in tos, choose Create record, do the following:</p> <ol> <li>For Record name, enter the part of CNAME name recorded in Step 1. Create ACM certificate, such as _5db1a2688389b3b76ef6e2accaf9a85d.keycloak.yourdomain.com.</li> <li>For Record Type, choose CNAME.</li> <li>For Value, enter the CNAME value recorded in Step 1. Create ACM certificate, such as _1e9108227615sd40f3a767a9dc7a29cb.bpxxncpwjz.acm-validations.aws..</li> </ol> </li> <li> <p>Choose Create records.</p> </li> <li> <p>Go back to AWS Certificate Manager console and wait for about 5 minutes. Click the Refresh button, and wait until Status of ACM certificate changed to Issued.</p> </li> </ol>"},{"location":"implementation-guide/deployment/#step-3-launch-the-stack","title":"Step 3. Launch the stack","text":"<p>You have 4 different options to launch the stack.</p> <p>For Aurora Serverless deployments, Aurora Serverless v2 MySQL-Compatible is provided by default in the CloudFormation templates. For more information, see Comparison of Aurora Serverless v2 and Aurora Serverless v1 requirements. </p> Option VPC Database Quick Launch Template Link Option 1: Deploy Keycloak based on Aurora Serverless MySQL-Compatible from an existing VPC Existing Aurora Serverless MySQL-Compatible Global China Download Option 2: Deploy Keycloak based on Aurora Serverless MySQL-Compatible from a new VPC New Aurora Serverless MySQL-Compatible Global China Download Option 3: Deploy Keycloak based on Aurora MySQL-Compatible from an existing VPC Existing Aurora MySQL-Compatible Global China Download Option 4: Deploy Keycloak based on Aurora MySQL-Compatible from a new VPC New Aurora MySQL-Compatible Global China Download"},{"location":"implementation-guide/deployment/#option-1-deploy-keycloak-based-on-aurora-serverless-mysql-compatible-from-an-existing-vpc","title":"Option 1: Deploy Keycloak based on Aurora Serverless MySQL-Compatible from an existing VPC","text":"<ol> <li> <p>Log in to the AWS CloudFormation console.</p> </li> <li> <p>In the left navigation pane, choose Stacks.</p> </li> <li> <p>Choose Create stacks, and choose With new resources(standard).</p> </li> <li> <p>On the Step 1 Specify template section, do the following:</p> <ol> <li>For Prepare template, choose Template is ready.</li> <li>For Template source, choose Upload a template file.</li> <li>Choose Choose file, and select the template file, such as keycloak-aurora-serverless-from-existing-vpc.template.</li> </ol> </li> <li> <p>Choose Next.</p> </li> <li> <p>On the Step 2 Specify stack details section, do the following:</p> <ol> <li>Stack name: A stack name, such as KeycloakOnAWS. </li> <li>CertificateArn: Enter the ARN recorded in Step 1. Create ACM certificate, such as arn:aws:acm:us-west-2:1436237113227:certificate/571518b3-123b-4502-1ec3-3t2sae704272.</li> <li>Hostname: Enter domain name for your Keycloak server. </li> <li>VpcId: Select from existing VPCs.</li> <li>PubSubnets: Select public subnets for ALB deployment.</li> <li>PrivSubnets: Select the private subnet for the ECS Task.</li> <li>DBSubnets: Select the private subnet for the database.</li> <li>TaskCPU: Specify the CPU for the Fargate Task running your keycloak application. The default value is 4096 (4 vCPU). See Task CPU and memory for details.</li> <li>TaskMemory: Specify the Memory for the Fargate Task running your keycloak application. The default value is 8192 MiB (8 GB). Please note that this value must be within the range allowed by the TaskCPU you select. See Task CPU and memory for details.</li> <li>MinContainers: Customize the minimum number of containers for the ECS, with a minimum value of 2.</li> <li>MaxContainers: Customize the maximum number of containers for the ECS, with a maximum value of 10.</li> <li>AutoScalingTargetCpuUtilization: The percentage of resource utilization that is ensured to be no higher, maximum 100.</li> <li>JavaOpts: JAVA_OPTS environment variable.</li> </ol> </li> <li> <p>Choose Next.</p> </li> <li> <p>On the Step 3 Configure Stack options section, you can add tags.</p> </li> <li> <p>Choose Next.</p> </li> <li> <p>Review the information for the stack. When you're satisfied with the settings, choose I acknowledge that AWS CloudFormation might create IAM resources.</p> </li> <li> <p>Choose Create stack.</p> </li> </ol>"},{"location":"implementation-guide/deployment/#option-2-deploy-keycloak-based-on-aurora-serverless-mysql-compatible-from-a-new-vpc","title":"Option 2: Deploy Keycloak based on Aurora Serverless MySQL-Compatible from a new VPC","text":"<ol> <li> <p>Log in to the AWS CloudFormation console.</p> </li> <li> <p>In the left navigation pane, choose Stacks.</p> </li> <li> <p>Choose Create stacks, and choose With new resources(standard).</p> </li> <li> <p>On the Step 1 Specify template section, do the following:</p> <ol> <li>For Prepare template, choose Template is ready.</li> <li>For Template source, choose Upload a template file.</li> <li>Choose Choose file, and select the template file, such as keycloak-aurora-serverless-from-new-vpc.template.</li> </ol> </li> <li> <p>Choose Next.</p> </li> <li> <p>On the Step 2 Specify stack details section, do the following:</p> <ol> <li>Stack name: A stack name, such as KeycloakOnAWS. </li> <li>CertificateArn: Enter the ARN recorded in Step 1. Create ACM certificate, such as arn:aws:acm:us-west-2:1436237113227:certificate/571518b3-123b-4502-1ec3-3t2sae704272.</li> <li>Hostname: Enter domain name for your Keycloak server. </li> <li>TaskCPU: Specify the CPU for the Fargate Task running your keycloak application. The default value is 4096 (4 vCPU). See Task CPU and memory for details.</li> <li>TaskMemory: Specify the Memory for the Fargate Task running your keycloak application. The default value is 8192 MiB (8 GB). Please note that this value must be within the range allowed by the TaskCPU you select. See Task CPU and memory for details.</li> <li>MinContainers: Customize the minimum number of containers for the ECS, with a minimum value of 2.</li> <li>MaxContainers: Customize the maximum number of containers for the ECS, with a maximum value of 10.</li> <li>AutoScalingTargetCpuUtilization: The percentage of resource utilization that is ensured to be no higher, maximum 100.</li> <li>JavaOpts: JAVA_OPTS environment variable.</li> </ol> </li> <li> <p>Choose Next.</p> </li> <li> <p>On the Step 3 Configure Stack options section, you can add tags.</p> </li> <li> <p>Choose Next.</p> </li> <li> <p>Review the information for the stack. When you're satisfied with the settings, choose I acknowledge that AWS CloudFormation might create IAM resources.</p> </li> <li> <p>Choose Create stack.</p> </li> </ol>"},{"location":"implementation-guide/deployment/#option-3-deploy-keycloak-based-on-aurora-mysql-compatible-from-an-existing-vpc","title":"Option 3: Deploy Keycloak based on Aurora MySQL-Compatible from an existing VPC","text":"<ol> <li> <p>Log in to the AWS CloudFormation console.</p> </li> <li> <p>In the left navigation pane, choose Stacks.</p> </li> <li> <p>Choose Create stacks, and choose With new resources(standard).</p> </li> <li> <p>On the Step 1 Specify template section, do the following:</p> <ol> <li>For Prepare template, choose Template is ready.</li> <li>For Template source, choose Upload a template file.</li> <li>Choose Choose file, and select the template file, such as keycloak-from-existing-vpc.template.</li> </ol> </li> <li> <p>Choose Next.</p> </li> <li> <p>On the Step 2 Specify stack details section, do the following:</p> <ol> <li>Stack name: A stack name, such as KeycloakOnAWS. </li> <li>CertificateArn: Enter the ARN recorded in Step 1. Create ACM certificate, such as arn:aws:acm:us-west-2:1436237113227:certificate/571518b3-123b-4502-1ec3-3t2sae704272.</li> <li>Hostname: Enter domain name for your Keycloak server. </li> <li>DatabaseInstanceType: Select the RDS instance type.</li> <li>VpcId: Select from existing VPCs.</li> <li>PubSubnets: Select public subnets for ALB deployment.</li> <li>PrivSubnets: Select the private subnet for the ECS Task.</li> <li>DBSubnets: Select the private subnet for the RDS database.</li> <li>TaskCPU: Specify the CPU for the Fargate Task running your keycloak application. The default value is 4096 (4 vCPU). See Task CPU and memory for details.</li> <li>TaskMemory: Specify the Memory for the Fargate Task running your keycloak application. The default value is 8192 MiB (8 GB). Please note that this value must be within the range allowed by the TaskCPU you select. See Task CPU and memory for details.</li> <li>MinContainers: Customize the minimum number of containers for the ECS, with a minimum value of 2.</li> <li>MaxContainers: Customize the m2ximum number of containers for the ECS, with a maximum value of 10.</li> <li>AutoScalingTargetCpuUtilization: The percentage of resource utilization that is ensured to be no higher, maximum 100.</li> <li>JavaOpts: JAVA_OPTS environment variable.</li> </ol> </li> <li> <p>Choose Next.</p> </li> <li> <p>On the Step 3 Configure Stack options section, you can add tags.</p> </li> <li> <p>Choose Next.</p> </li> <li> <p>Review the information for the stack. When you're satisfied with the settings, choose I acknowledge that AWS CloudFormation might create IAM resources.</p> </li> <li> <p>Choose Create stack.</p> </li> </ol>"},{"location":"implementation-guide/deployment/#option-4-deploy-keycloak-based-on-aurora-mysql-compatible-from-a-new-vpc","title":"Option 4: Deploy Keycloak based on Aurora MySQL-Compatible from a new VPC","text":"<ol> <li> <p>Log in to the AWS CloudFormation console.</p> </li> <li> <p>In the left navigation pane, choose Stacks.</p> </li> <li> <p>Choose Create stacks, and choose With new resources(standard).</p> </li> <li> <p>On the Step 1 Specify template section, do the following:</p> <ol> <li>For Prepare template, choose Template is ready.</li> <li>For Template source, choose Upload a template file.</li> <li>Choose Choose file, and select the template file, such as keycloak-from-new-vpc.template.</li> </ol> </li> <li> <p>Choose Next.</p> </li> <li> <p>On the Step 2 Specify stack details section, do the following:</p> <ol> <li>Stack name: A stack name, such as KeycloakOnAWS. </li> <li>CertificateArn: Enter the ARN recorded in Step 1. Create ACM certificate, such as arn:aws:acm:us-west-2:1436237113227:certificate/571518b3-123b-4502-1ec3-3t2sae704272`.</li> <li>Hostname: Enter domain name for your Keycloak server. </li> <li>DatabaseInstanceType: Select the RDS instance type.</li> <li>TaskCPU: Specify the CPU for the Fargate Task running your keycloak application. The default value is 4096 (4 vCPU). See Task CPU and memory for details.</li> <li>TaskMemory: Specify the Memory for the Fargate Task running your keycloak application. The default value is 8192 MiB (8 GB). Please note that this value must be within the range allowed by the TaskCPU you select. See Task CPU and memory for details.</li> <li>MinContainers: Customize the minimum number of containers for the ECS, with a minimum value of 2.</li> <li>MaxContainers: Customize the maximum number of containers for the ECS, with a maximum value of 10.</li> <li>AutoScalingTargetCpuUtilization: The percentage of resource utilization that is ensured to be no higher, maximum 100.</li> <li>JavaOpts: JAVA_OPTS environment variable.</li> </ol> </li> <li> <p>Choose Next.</p> </li> <li> <p>On the Step 3 Configure Stack options section, you can add tags.</p> </li> <li> <p>Choose Next.</p> </li> <li> <p>Review the information for the stack. When you're satisfied with the settings, choose I acknowledge that AWS CloudFormation might create IAM resources.</p> </li> <li> <p>Choose Create stack.</p> </li> </ol>"},{"location":"implementation-guide/deployment/#step-4-create-a-record-in-route-53-for-resolving-the-domain-name","title":"Step 4. Create a record in Route 53 for resolving the domain name","text":"<ol> <li> <p>Log in to the AWS CloudFormation console.</p> </li> <li> <p>In the left navigation pane, choose Stacks.</p> </li> <li> <p>Choose the new created Stack name to show detailed metadata, such as KeycloakOnAWS. </p> </li> <li> <p>Choose Outputs.</p> </li> <li> <p>Enter <code>KeyCloakKeyCloakContainerSerivceEndpointURL</code> in the Filter box, and click Enter. List filtered result, such as KeyCloakKeyCloakContainerSerivceEndpointURL9C81E19A.</p> </li> <li> <p>Copied the Value, such as Keycl-KeyCl-1WIJGTSV19UTB-541714271.xx-xxx-1.elb.amazonaws.com.</p> </li> <li> <p>Log in to the Amazon Route 53 console.</p> </li> <li> <p>In the left navigation pane, choose Hosted zones.</p> </li> <li> <p>Choose Domain name to show detailed metadata for a listed Hosted zones. Choose Create record, do the following:</p> <ol> <li>For Record name, enter subdomain for your keycloak services, such as keycloak.yourdomain.com.</li> <li>For Record Type, choose CNAME.</li> <li>For Value, paste the DNS name copied earlier, such as Keycl-KeyCl-1WIJGTSV19UTB-541714271.xx-xxx-1.elb.amazonaws.com.</li> </ol> </li> <li> <p>Choose Create records.</p> </li> </ol>"},{"location":"implementation-guide/deployment/#step-5-access-the-keycloak-web-console","title":"Step 5. Access the Keycloak web console","text":"<ol> <li> <p>Log in to the AWS Secrets Manager console.</p> </li> <li> <p>From the top navigation bar, select the Region where your keycloak deployed.</p> </li> <li> <p>In the left navigation pane, choose Secrets.</p> </li> <li> <p>Enter <code>KeyCloakKCSecret</code> in the Filter box, and click Enter. Choose filtered results, such as KeyCloakKCSecretF8498E5C-VVSujKlsllRI.</p> </li> <li> <p>Choose Retrieve secret value in the Secret value section.</p> </li> <li> <p>Copy the username and password.</p> </li> <li> <p>Enter your keycloak domain name in the address bar of your browser, such as https://keycloak.yourdomain.com.</p> </li> <li> <p>Click the Administration Console link.</p> </li> <li> <p>Enter username and password copied earlier, and click Sign In. </p> </li> </ol>"},{"location":"implementation-guide/revisions/","title":"Revisions","text":"Date Description July 2022 Release 2.1.0  1. Upgrade Keycloak to version 16.1.1  2. Upgrade aws-cdk to version 1.160.0  3. Upgrade cdk-keycloak to version 0.2.41 Oct 2023 Release 2.1.6  1. Upgrade Keycloak to version 22.0.4  2. Upgrade aws-cdk to version 2.100.0  3. Upgrade cdk-keycloak to version 2.9.0"},{"location":"implementation-guide/tutorials/ad-ldap/","title":"Tutorial: How to integrate Keycloak with AD/LDAP?","text":"<p>Keycloak allows user federation with AD/LDAP. This guide walks you through the user federation with OpenLDAP service. For more information, see User Federation from the Keycloak documentation.</p> <p>Keycloak supports multiple LDAP services including Microsoft AD and OpenLDAP. The following tutorial will run an OpenLDAP service in the same VPC with the Keycloak service.</p>"},{"location":"implementation-guide/tutorials/ad-ldap/#prerequisites","title":"Prerequisites","text":"<p>You have already deployed the solution via CloudFormation or AWS CDK and already successfully logged in to the Keycload dashboard as Keycloak admin user.</p>"},{"location":"implementation-guide/tutorials/ad-ldap/#steps","title":"Steps","text":"<p>Step 1. Launch an EC2 instance for OpenLDAP</p> <p>Step 2. Install OpenLDAP</p> <p>Step 3. Create a User Federation on Keycloak</p> <p>Step 4. Validate the user federation</p>"},{"location":"implementation-guide/tutorials/ad-ldap/#step-1-launch-an-ec2-instance-for-openldap","title":"Step 1. Launch an EC2 instance for OpenLDAP","text":"<p>You need to launch an EC2 instance in the same VPC with your Keycloak service, and do the following to configure the security group of this EC2 instance and ensure all traffic from the VPC CIDR can access its LDAP port (TCP 389).</p> <ol> <li> <p>Log in to the Amazon EC2  console.</p> </li> <li> <p>In the left navigation pane, choose Security Groups.</p> </li> <li> <p>Enter <code>KeyCloakKeyCloakContainer</code> in the Filter box, and click Enter, then copy the Security group ID, such as sg-0121f1140bbfd72c6.</p> </li> <li> <p>Choose the Security Groups where your EC2 instance is located, and add an Inbound rules to allow ECS access to OpenLDAP.</p> </li> <li> <p>Choose Save rules.</p> </li> </ol>"},{"location":"implementation-guide/tutorials/ad-ldap/#step-2-install-openldap","title":"Step 2. Install OpenLDAP","text":"<p>Install OpenLDAP with Docker in your EC2 instance.</p> <ol> <li>Connect to your instance.</li> <li> <p>Do the following: <pre><code># Install docker \nyum install -y docker\nsystemctl start docker\n# start the docker container\ndocker run -p 389:1389 public.ecr.aws/bitnami/openldap:latest\n</code></pre></p> </li> <li> <p>Open another terminal and install the OpenLDAP clients. <pre><code># install ldap client\nyum install -y openldap-clients\n# list all users\nldapsearch -x -b \"ou=users,dc=example,dc=org\" -H ldap://&lt;EC2_PRIVATE_IP&gt;\n</code></pre> For example: <pre><code>[root@xxxx ~]# ldapsearch -x -b \"ou=users,dc=example,dc=org\" -H ldap://&lt;EC2_PRIVATE_IP&gt;\n# extended LDIF\n#\n# LDAPv3\n# base &lt;ou=users,dc=example,dc=org&gt; with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# users, example.org\ndn: ou=users,dc=example,dc=org\nobjectClass: organizationalUnit\nou: users\n\n# user01, users, example.org\ndn: cn=user01,ou=users,dc=example,dc=org\ncn: User1\ncn: user01\nsn: Bar1\nobjectClass: inetOrgPerson\nobjectClass: posixAccount\nobjectClass: shadowAccount\nuserPassword:: Yml0bmFtaTE=\nuid: user01\nuidNumber: 1000\ngidNumber: 1000\nhomeDirectory: /home/user01\n\n# user02, users, example.org\ndn: cn=user02,ou=users,dc=example,dc=org\ncn: User2\ncn: user02\nsn: Bar2\nobjectClass: inetOrgPerson\nobjectClass: posixAccount\nobjectClass: shadowAccount\nuserPassword:: Yml0bmFtaTI=\nuid: user02\nuidNumber: 1001\ngidNumber: 1001\nhomeDirectory: /home/user02\n\n# readers, users, example.org\ndn: cn=readers,ou=users,dc=example,dc=org\ncn: readers\nobjectClass: groupOfNames\nmember: cn=user01,ou=users,dc=example,dc=org\nmember: cn=user02,ou=users,dc=example,dc=org\n\n# search result\nsearch: 2\nresult: 0 Success\n\n# numResponses: 5\n# numEntries: 4\n</code></pre></p> </li> </ol> <p>Now your default LDAP service is ready.</p>"},{"location":"implementation-guide/tutorials/ad-ldap/#step-3-create-a-user-federation-on-keycloak","title":"Step 3. Create a User Federation on Keycloak","text":"<ol> <li> <p>Log in to the Keycloak dashboard as Keycloak admin user.</p> </li> <li> <p>In the left navigation pane, choose User Federation.</p> </li> <li> <p>Click the Add provider drop-down menu, and choose ldap.</p> </li> <li> <p>In the page that opens, enter the following information:</p> <ol> <li>Edit Mode: Choose <code>WRITABLE</code>.</li> <li>Vendor: Choose <code>Other</code>.</li> <li>Username LDAP attribute: Enter your LDAP attribute name for username, use <code>cn</code> in this tutorial.</li> <li>RDN LDAP attribute: Enter your LDAP attribute name for user RDN, use <code>cn</code> in this tutorial.</li> <li>UUID LDAP attribute: Enter your LDAP attribute name for UUID, use <code>uid</code> in this tutorial.</li> <li>User Object Classes: Enter your LDAP User Object Classes, use <code>inetOrgPerson, posixAccount, shadowAccount</code> in this tutorial.</li> <li>Connection URL: Enter your LDAP connection URL, use <code>ldap://&lt;EC2_PRIVATE_IP&gt;</code> in this tutorial, and click Test connection, Prompt the following information \"Success! LDAP connection successful.\".</li> <li>Users DN: Enter your LDAP Users DN, use <code>ou=users,dc=example,dc=org</code> in this tutorial.</li> <li>Bind Type: Choose <code>simple</code>.</li> <li>Bind DN: Enter your LDAP bind DN, use <code>cn=admin,dc=example,dc=org</code> in this tutorial.</li> <li>Bind Credential: Enter your LDAP Bind Credentials, use <code>adminpassword</code> in this tutorial, and click <code>Test authentication</code>, Prompt the following information \"Success! LDAP authentication successful.\".</li> </ol> </li> <li> <p>Choose Save.</p> </li> <li> <p>Choose Synchronize all users. The following information prompts \"Success! Sync of users finished successfully. 2 imported users, 0 updated users\".</p> </li> <li> <p>In the left navigation pane, choose Users.</p> </li> <li> <p>Choose View all users, user1 and user2 should be imported successfully.</p> </li> </ol>"},{"location":"implementation-guide/tutorials/ad-ldap/#step-4-validate-the-user-federation","title":"Step 4. Validate the User federation","text":"<p>Now you can validate the User Federation with the account-console login.</p> <ol> <li> <p>Log in to the Keycloak dashboard as Keycloak admin user.</p> </li> <li> <p>In the left navigation pane, choose Clients.</p> </li> <li> <p>Click the Base URL of account-console.</p> </li> <li> <p>On the Keycloak account console you have been redirected, click Sign In in the upper right corner. </p> </li> <li> <p>Enter user1 to Username or email, enter bitnami1 to Password.</p> </li> <li> <p>Click Sign In to login to the console.</p> </li> </ol>"},{"location":"implementation-guide/tutorials/ad-ldap/#faq","title":"FAQ","text":"<p>1. Does Keycloak support LDAPS protocol?</p> <p>Yes. both ldap:// and ldaps:// are supported. To enable ldaps://, make sure your AD/LDAP is running with LDAPS and has properly imported the certificate.</p> <p>2. What vendor type should I select if I am running Microsoft AD server?</p> <p>Select Active Directory from the Vendor list.</p> <p></p>"},{"location":"implementation-guide/tutorials/api-gateway/","title":"Tutorial: How to integrate Keycloak with Amazon API Gateway?","text":"<p>This tutorial demonstrates how to control permissions for different users to access different API interfaces through Keycloak. For more information, see Authorization Services from the Keycloak document.</p>"},{"location":"implementation-guide/tutorials/api-gateway/#architecture","title":"Architecture","text":""},{"location":"implementation-guide/tutorials/api-gateway/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>You have already deployed the keycloak-on-aws via CloudFormation or AWS CDK and already successfully logged in the Keycload dashboard as Keycloak admin user. </p> </li> <li> <p>Make sure your have the following JAVA_OPTS filled in CloudFormation parameter.     <pre><code>-Dkeycloak.profile.feature.scripts=enabled -Dkeycloak.profile.feature.upload_scripts=enabled\n</code></pre></p> </li> </ol>"},{"location":"implementation-guide/tutorials/api-gateway/#deployment-overview","title":"Deployment Overview","text":"<p>Use the following steps to deploy this solution on AWS.</p> <p>Step 1. Git clone keycloak-on-aws</p> <p>Step 2. Import the Keycloak example config</p> <p>Step 3. Run serverless-express-auth locally</p> <p>Step 4. Run Vue UI locally</p> <p>Step 5. Validate the User Permissions</p>"},{"location":"implementation-guide/tutorials/api-gateway/#step-1-git-clone-keycloak-on-aws","title":"Step 1. Git clone keycloak-on-aws","text":"<p>Download the keycloak-on-aws code locally.</p> <pre><code>git clone https://github.com/aws-samples/keycloak-on-aws.git\ncd keycloak-on-aws\n</code></pre>"},{"location":"implementation-guide/tutorials/api-gateway/#step-2-import-the-keycloak-example-config","title":"Step 2. Import the Keycloak example config","text":"<ol> <li> <p>Login the Keycloak dashboard as keycloak admin user.</p> </li> <li> <p>Hover over the Master in the left navigation pane, and choose Add realm.</p> </li> <li> <p>Choose Select file, and select tutorials/api-gateway/resoures/keycloak.json in your git downloaded code. </p> </li> <li> <p>Choose Create.</p> </li> </ol>"},{"location":"implementation-guide/tutorials/api-gateway/#step-3-run-serverless-express-auth-locally","title":"Step 3. Run serverless-express-auth locally","text":"<p>This example is mainly based on expressjs and official keycloak-nodejs-connect. And using serverless-express to make expressjs be able to run on lambda.</p> <p>The advantage of this way is keycloak-nodejs-connect is maintained by keycloak team and it is the recommended way to connect to keycloak. <pre><code>Notice: The document of keycloak-nodejs-connect is at https://www.keycloak.org/docs/latest/securing_apps/#_nodejs_adapter\n</code></pre></p> <ol> <li> <p>Login the Keycloak dashboard as keycloak admin user.</p> </li> <li> <p>In the left navigation pane, and choose Clients.</p> </li> <li> <p>Choose vue to show detailed metadata.</p> </li> <li> <p>Choose Installation.</p> </li> <li> <p>Click Format Option, choose Keycloak OIDC JSON.</p> </li> <li> <p>According to keycloak client installation config to update tutorials/api-gateway/resources/keycloak.json in your git downloaded code. <pre><code>{\n  \"realm\": \"keycloak-on-aws\",\n  \"auth-server-url\": \"https://keycloak.yourdomain.com/auth/\",\n  \"ssl-required\": \"external\",\n  \"resource\": \"vue\",\n  \"public-client\": true,\n  \"confidential-port\": 0,\n  // Don't remove the following line, this is for vue-ui to contact to api gw !!!\n  \"x-api-gw-url\": \"http://localhost:3003/dev/hello\"\n}\n</code></pre></p> </li> <li>Go to tutorials/api-gateway/serverless-express-auth directory, do the following. <pre><code>cd tutorials/api-gateway/serverless-express-auth\nyarn\nyarn offline\n</code></pre> Sample Output <pre><code>yarn run v1.22.19\n$ SLS_DEBUG=* serverless offline --host 0.0.0.0 --httpPort 3003 --lambdaPort=3019\n...\noffline: Offline [http for lambda] listening on http://0.0.0.0:3019\noffline: Function names exposed for local invocation by aws-sdk:\n           * authEndpoint: serverless-express-auth-dev-authEndpoint\n           * hello: serverless-express-auth-dev-hello\n[offline] Lambda Invocation Routes (for AWS SDK or AWS CLI):\n           * POST http://0.0.0.0:3019/2015-03-31/functions/serverless-express-auth-dev-authEndpoint/invocations\n           * POST http://0.0.0.0:3019/2015-03-31/functions/serverless-express-auth-dev-hello/invocations\n[offline] Lambda Async Invocation Routes (for AWS SDK or AWS CLI):\n           * POST http://0.0.0.0:3019/2014-11-13/functions/serverless-express-auth-dev-authEndpoint/invoke-async/\n           * POST http://0.0.0.0:3019/2014-11-13/functions/serverless-express-auth-dev-hello/invoke-async/\noffline: Configuring Authorization: hello authEndpoint\n[offline] Creating Authorization scheme for hello-authEndpoint-GET-hello\n\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502                                                                       \u2502\n   \u2502   GET | http://0.0.0.0:3003/dev/hello                                 \u2502\n   \u2502   POST | http://0.0.0.0:3003/2015-03-31/functions/hello/invocations   \u2502\n   \u2502                                                                       \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\noffline: [HTTP] server ready: http://0.0.0.0:3003 \ud83d\ude80\noffline: \noffline: Enter \"rp\" to replay the last request\n</code></pre></li> </ol>"},{"location":"implementation-guide/tutorials/api-gateway/#step-4-run-vue-ui-locally","title":"Step 4. Run Vue UI locally","text":"<p><pre><code>cd tutorials/api-gateway/vue-ui\nyarn\nyarn serve\n</code></pre> Sample Output <pre><code>yarn run v1.22.19\n$ vue-cli-service serve\nBrowserslist: caniuse-lite is outdated. Please run:\n  npx browserslist@latest --update-db\n  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating\n INFO  Starting development server...\nStarting type checking service...\nUsing 1 worker with 2048MB memory limit\n98% after emitting CopyPlugin\n\n DONE  Compiled successfully in 1638ms                                                3:42:04 PM\n\nNo type errors found\nVersion: typescript 4.2.4\nTime: 1111ms\n\n  App running at:\n  - Local:   http://localhost:8080/ \n  - Network: http://localhost:8080/\n\n  Note that the development build is not optimized.\n  To create a production build, run yarn build.\n</code></pre></p>"},{"location":"implementation-guide/tutorials/api-gateway/#step-5-validate-the-user-permissions","title":"Step 5. Validate the User Permissions","text":"<p>A common scenario is, different users have different permissions to perform an action (allow/deny). We have built in two different users, user1 is allowed to call API GW while user2 is not.</p> <p>Users:</p> user password realm role desription user1 user1 call-api user1 is permited to call api gateway user2 user2 - user2 is not permited to call api gateway <ol> <li> <p>Log in to the Vue UI console, such as http://localhost:8080/.</p> </li> <li> <p>Choose Login.</p> </li> <li> <p>Enter user1 to Username or email, enter user1 to Password.</p> </li> <li> <p>Choose Sign In.</p> </li> <li> <p>Choose Request, you will get the following response message, the response will be successfully. <pre><code>{\n  \"url\": \"http://localhost:3003/dev/hello\",\n  \"status\": 200,\n  \"statusText\": \"OK\",\n  \"data\": {\n    \"message\": \"Hello World from protect server\"\n  }\n}\n</code></pre></p> </li> <li> <p>Choose Logout.</p> </li> <li> <p>Enter user2 to Username or email, enter user2 to Password.</p> </li> <li> <p>Choose Sign In.</p> </li> <li> <p>Choose Request, you will get the following response message, the response will fail. <pre><code>{\n  \"url\": \"http://localhost:3003/dev/hello\",\n  \"status\": 401,\n  \"statusText\": \"Unauthorized\",\n  \"data\": {\n    \"statusCode\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"Unauthorized\"\n  }\n}\n</code></pre></p> </li> </ol>"},{"location":"implementation-guide/tutorials/api-gateway/#faq","title":"FAQ","text":"<p>1. How to export Keycloak realm users?</p> <p>Run the following command to export Keycloak realm users:</p> <pre><code>$ docker exec &lt;container id&gt;\n$ /opt/jboss/keycloak/bin/standalone.sh -Dkeycloak.migration.action=export -Dkeycloak.migration.realmName=keycloak-on-aws -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=realm-export.json -Djboss.socket.binding.port-offset=99\n</code></pre> <p>For more information, refer to https://stackoverflow.com/questions/60766292/how-to-get-keycloak-to-export-realm-users-and-then-exit.</p>"}]}