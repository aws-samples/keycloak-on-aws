{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This solution allows you to quickly deploy a Keycloak cluster on Amazon Web Services Cloud. Keycloak is an Open Source Identity and Access Management solution for modern Applications and Services. Providing a customizable user interface, Keycloak supports use cases such as Single Sign-On (SSO), user registration, and user federation. You can configure Keycloak to integrate with Active Directory and LDAP. You can also set up Keycloak to delegate authentication to third-party identity providers. This solution mainly includes the following features: Single-Sign On : supports standard protocols such as OpenID Connect, OAuth 2.0, and SAML 2.0. Identity and Access Management : provides user federation, strong authentication, user management, fine-grained authorization, and so on. Authentication can be added to applications and services without having to deal with storing users or authenticating users. Terminology The following table lists the terminologies related to this solution. Terminology Full Name Description SSO Single-Sign On Single sign-on (SSO) is an authentication scheme that allows a user to log in with a single ID to any of several related, yet independent, software systems. SAML Security Assertion Markup Language Security Assertion Markup Language is an open standard for exchanging authentication and authorization data between parties, in particular, between an identity provider and a service provider. SAML is an XML-based markup language for security assertions (statements that service providers use to make access-control decisions). OAuth Open Authorization Open Authorization is an open standard for access delegation, commonly used as a way for internet users to grant websites or applications access to their information on other websites but without giving them the passwords. OpenID OpenID OpenID is an open standard and decentralized authentication protocol promoted by the non-profit OpenID Foundation. For more information, refer to OpenID Connect . ICP Internet Content Provider ICP license is a permit issued by the Chinese Ministry of Industry and Information Technology (MIIT) to permit China-based websites to operate in China. JWT JSON Web Token JSON Web Token is a proposed Internet standard for creating data with optional signature and/or optional encryption whose payload holds JSON that asserts some number of claims. The tokens are signed either using a private secret or a public/private key. LDAP Lightweight Directory Access Protocol The Lightweight Directory Access Protocol is an open, vendor-neutral, industry standard application protocol for accessing and maintaining distributed directory information services over an Internet Protocol (IP) network. AD Active Directory Active Directory is a directory service developed by Microsoft for Windows domain networks. It is included in most Windows Server operating systems as a set of processes and services. This implementation guide describes architectural considerations and configuration steps for deploying the Keycloak solution in the AWS cloud. It includes links to CloudFormation templates that launches and configures the AWS services required to deploy this solution using AWS best practices for security and availability. The guide is intended for IT architects, developers, DevOps with practical experience architecting in the AWS Cloud.","title":"Overview"},{"location":"#terminology","text":"The following table lists the terminologies related to this solution. Terminology Full Name Description SSO Single-Sign On Single sign-on (SSO) is an authentication scheme that allows a user to log in with a single ID to any of several related, yet independent, software systems. SAML Security Assertion Markup Language Security Assertion Markup Language is an open standard for exchanging authentication and authorization data between parties, in particular, between an identity provider and a service provider. SAML is an XML-based markup language for security assertions (statements that service providers use to make access-control decisions). OAuth Open Authorization Open Authorization is an open standard for access delegation, commonly used as a way for internet users to grant websites or applications access to their information on other websites but without giving them the passwords. OpenID OpenID OpenID is an open standard and decentralized authentication protocol promoted by the non-profit OpenID Foundation. For more information, refer to OpenID Connect . ICP Internet Content Provider ICP license is a permit issued by the Chinese Ministry of Industry and Information Technology (MIIT) to permit China-based websites to operate in China. JWT JSON Web Token JSON Web Token is a proposed Internet standard for creating data with optional signature and/or optional encryption whose payload holds JSON that asserts some number of claims. The tokens are signed either using a private secret or a public/private key. LDAP Lightweight Directory Access Protocol The Lightweight Directory Access Protocol is an open, vendor-neutral, industry standard application protocol for accessing and maintaining distributed directory information services over an Internet Protocol (IP) network. AD Active Directory Active Directory is a directory service developed by Microsoft for Windows domain networks. It is included in most Windows Server operating systems as a set of processes and services. This implementation guide describes architectural considerations and configuration steps for deploying the Keycloak solution in the AWS cloud. It includes links to CloudFormation templates that launches and configures the AWS services required to deploy this solution using AWS best practices for security and availability. The guide is intended for IT architects, developers, DevOps with practical experience architecting in the AWS Cloud.","title":"Terminology"},{"location":"implementation-guide/additional-resources/","text":"AWS Services AWS CloudFormation Amazon ECS Amazon ECR Amazon Certificate Manager (ACM) AWS Identity and Access Management (IAM) Amazon Route 53 Amazon Aurora AWS Secrets Manager Application Load Balancer AWS Fargate","title":"Additional resources"},{"location":"implementation-guide/additional-resources/#aws-services","text":"AWS CloudFormation Amazon ECS Amazon ECR Amazon Certificate Manager (ACM) AWS Identity and Access Management (IAM) Amazon Route 53 Amazon Aurora AWS Secrets Manager Application Load Balancer AWS Fargate","title":"AWS Services"},{"location":"implementation-guide/architecture/","text":"Deploying this solution with the default parameters builds the following environment in the AWS Cloud. Figure 1: Solution architecture This solution deploys the AWS CloudFormation template in your AWS Cloud account and completes the following settings. A highly available architecture that spans two Availability Zones . A Amazon Virtual Private Cloud (Amazon VPC) configured with public and private subnets, according to AWS best practices, to provide you with your own virtual network on AWS. In the public subnets, managed Network Address Translation (NAT) gateways to allow outbound internet access for resources in the private subnets. In the private subnets: Amazon Elastic Container Service (Amazon ECS) tasks running with AWS Fargate behind the Application Load Balancer . Amazon Aurora Serverless MySQL-Compatible database cluster or Amazon Aurora MySQL-Compatible cluster. IAM role for the Amazon ECS service. Secrets from AWS Secrets Manager for Keycloak console login and database connection. AWS Certificate Manager (ACM) , which uses your existing certificate for the custom domain name on the Application Load Balancer . Amazon Route 53 alias record, which is required for the custom domain name.","title":"Architecture overview"},{"location":"implementation-guide/considerations/","text":"Regional deployments This solution uses services which may not be currently available in all AWS Regions. Launch this solution in an AWS Region where required services are available. For the most current availability by Region, refer to the AWS Regional Services List . Because the solution has Amazon Aurora MySQL-Compatible and Amazon Aurora Serverless MySQL-Compatible to choose from, when deploying with CloudFormation, you need to check whether the region supports Amazon Aurora Serverless MySQL-Compatible or Amazon Aurora MySQL-Compatible. Supported regions for deployment in AWS Global Regions Region ID Region Name Amazon Aurora MySQL-Compatible Amazon Aurora Serverless MySQL-Compatible us-east-1 US East (N. Virginia) \u2714 \u2714 us-east-2 US East (Ohio) \u2714 \u2714 us-west-1 US West (N. California) \u2714 \u2714 us-west-2 US West (Oregon) \u2714 \u2714 af-south-1 Asia (Cape Town) \u2714 - ap-south-1 Asia Pacific (Mumbai) \u2714 \u2714 ap-northeast-3 Asia Pacific (Osaka) \u2714 - ap-northeast-2 Asia Pacific (Seoul) \u2714 \u2714 ap-southeast-1 Asia Pacific (Singapore) \u2714 \u2714 ap-southeast-2 Asia Pacific (Sydney) \u2714 \u2714 ap-northeast-1 Asia Pacific (Tokyo) \u2714 \u2714 ca-central-1 Canada (Central) \u2714 \u2714 eu-central-1 Europe (Frankfurt) \u2714 \u2714 eu-west-1 Europe (Ireland) \u2714 \u2714 eu-west-2 Europe (London) \u2714 \u2714 eu-west-3 Europe (Paris) \u2714 \u2714 eu-north-1 Europe (Stockholm) \u2714 - sa-east-1 South America (Sao Paulo) \u2714 - Supported regions for deployment in AWS China Regions Region ID Region Name Amazon Aurora MySQL-Compatible Amazon Aurora Serverless MySQL-Compatible cn-north-1 China (Beijing) Region Operated by Sinnet \u2714 - cn-northwest-1 China (Ningxia) Region Operated by NWCD \u2714 \u2714","title":"Considerations"},{"location":"implementation-guide/considerations/#regional-deployments","text":"This solution uses services which may not be currently available in all AWS Regions. Launch this solution in an AWS Region where required services are available. For the most current availability by Region, refer to the AWS Regional Services List . Because the solution has Amazon Aurora MySQL-Compatible and Amazon Aurora Serverless MySQL-Compatible to choose from, when deploying with CloudFormation, you need to check whether the region supports Amazon Aurora Serverless MySQL-Compatible or Amazon Aurora MySQL-Compatible. Supported regions for deployment in AWS Global Regions Region ID Region Name Amazon Aurora MySQL-Compatible Amazon Aurora Serverless MySQL-Compatible us-east-1 US East (N. Virginia) \u2714 \u2714 us-east-2 US East (Ohio) \u2714 \u2714 us-west-1 US West (N. California) \u2714 \u2714 us-west-2 US West (Oregon) \u2714 \u2714 af-south-1 Asia (Cape Town) \u2714 - ap-south-1 Asia Pacific (Mumbai) \u2714 \u2714 ap-northeast-3 Asia Pacific (Osaka) \u2714 - ap-northeast-2 Asia Pacific (Seoul) \u2714 \u2714 ap-southeast-1 Asia Pacific (Singapore) \u2714 \u2714 ap-southeast-2 Asia Pacific (Sydney) \u2714 \u2714 ap-northeast-1 Asia Pacific (Tokyo) \u2714 \u2714 ca-central-1 Canada (Central) \u2714 \u2714 eu-central-1 Europe (Frankfurt) \u2714 \u2714 eu-west-1 Europe (Ireland) \u2714 \u2714 eu-west-2 Europe (London) \u2714 \u2714 eu-west-3 Europe (Paris) \u2714 \u2714 eu-north-1 Europe (Stockholm) \u2714 - sa-east-1 South America (Sao Paulo) \u2714 - Supported regions for deployment in AWS China Regions Region ID Region Name Amazon Aurora MySQL-Compatible Amazon Aurora Serverless MySQL-Compatible cn-north-1 China (Beijing) Region Operated by Sinnet \u2714 - cn-northwest-1 China (Ningxia) Region Operated by NWCD \u2714 \u2714","title":"Regional deployments"},{"location":"implementation-guide/cost/","text":"Cost Estimation You will be responsible for the cost of using each of the AWS services when running the solution. As of July 2022, the main factors affecting the solution cost include: AWS Fargate Amazon Aurora MySQL-Compatible Application Load Balancer Example 1 Your database instance uses Amazon Aurora MySQL-Compatible, with Multi-AZ deployment option, OnDemand pricing model. The monthly cost of using this solution in the US East (N. Virginia) region is shown below: Service Dimensions Cost (MLY) AWS Fargate 1. 2 ECS Tasks that run for 24 hours every day. 2. Each ECS task uses 1 vCPU, 2GB memory, and 20GB ephemeral storage. $ 72.08 Amazon Aurora MySQL-Compatible 1. Use db.t3.medium (2 vCPU, 4 GB memory). 2. A Multi-AZ DB cluster has a writer DB instance and a reader DB instances in two separate Availability Zones in the same AWS Region. 3. Pricing model is OnDemand. 4. 50GB General Purpose SSD (gp2) storage. 5. 30 Baseline IO rate per second, 100 Peak IO rate per second, and 60 Duration of peak IO activity hours per month. $ 143.51 Application Load Balancer 1. 100 GB per month for EC2 Instances and IP addresses as targets. 2. Average 40 new connections per second. $ 25.77 Total $ 241.36 Example 2 Your database instance uses Amazon Aurora MySQL-Compatible, with Multi-AZ deployment option, reserved (1 year) pricing model. The monthly cost of using this solution in the US East (N. Virginia) region is shown below: Service Dimensions Cost (MLY) AWS Fargate 1. 2 ECS Tasks that run for 24 hours every day. 2. Each ECS task uses 1 vCPU, 2GB memory, and 20GB ephemeral storage. $ 72.08 Amazon Aurora MySQL-Compatible 1. Use db.t3.medium (2 vCPU, 4 GB memory). 2. A Multi-AZ DB cluster has a writer DB instance and a reader DB instances in two separate Availability Zones in the same AWS Region. 3. Pricing model is Reserved (1 year), purchase Option is All Upfront. 4. 50GB General Purpose SSD (gp2) storage, 30 Baseline IO rate per second, 100 Peak IO rate per second, and 60 Duration of peak IO activity hours per month. $ 103.12 Application Load Balancer 1. 100 GB per month for EC2 Instances and IP addresses as targets. 2. Average 40 new connections per second. $ 25.77 Total $ 200.97 Example 3 Your database instance use Amazon Aurora Serverless MySQL-Compatible. The monthly cost of using this solution in the US East (N. Virginia) region is shown below: Service Dimensions Cost (MLY) AWS Fargate 1. 2 ECS Tasks that run for 24 hours every day. 2. Each ECS task uses 1 vCPU, 2GB memory, and 20GB ephemeral storage. $ 72.08 Amazon Aurora Serverless MySQL-Compatible 1. 12 ACUs per day. 2. 50GB database storage. 3. 30 Baseline IO rate per second, 100 Peak IO rate per second, and 60 Duration of peak IO activity hours per month. $ 67.59 Application Load Balancer 1. 100 GB per month for EC2 Instances and IP addresses as targets. 2. Average 40 new connections per second. $ 25.77 Total $ 165.44","title":"Cost"},{"location":"implementation-guide/cost/#cost-estimation","text":"You will be responsible for the cost of using each of the AWS services when running the solution. As of July 2022, the main factors affecting the solution cost include: AWS Fargate Amazon Aurora MySQL-Compatible Application Load Balancer","title":"Cost Estimation"},{"location":"implementation-guide/cost/#example-1","text":"Your database instance uses Amazon Aurora MySQL-Compatible, with Multi-AZ deployment option, OnDemand pricing model. The monthly cost of using this solution in the US East (N. Virginia) region is shown below: Service Dimensions Cost (MLY) AWS Fargate 1. 2 ECS Tasks that run for 24 hours every day. 2. Each ECS task uses 1 vCPU, 2GB memory, and 20GB ephemeral storage. $ 72.08 Amazon Aurora MySQL-Compatible 1. Use db.t3.medium (2 vCPU, 4 GB memory). 2. A Multi-AZ DB cluster has a writer DB instance and a reader DB instances in two separate Availability Zones in the same AWS Region. 3. Pricing model is OnDemand. 4. 50GB General Purpose SSD (gp2) storage. 5. 30 Baseline IO rate per second, 100 Peak IO rate per second, and 60 Duration of peak IO activity hours per month. $ 143.51 Application Load Balancer 1. 100 GB per month for EC2 Instances and IP addresses as targets. 2. Average 40 new connections per second. $ 25.77 Total $ 241.36","title":"Example 1"},{"location":"implementation-guide/cost/#example-2","text":"Your database instance uses Amazon Aurora MySQL-Compatible, with Multi-AZ deployment option, reserved (1 year) pricing model. The monthly cost of using this solution in the US East (N. Virginia) region is shown below: Service Dimensions Cost (MLY) AWS Fargate 1. 2 ECS Tasks that run for 24 hours every day. 2. Each ECS task uses 1 vCPU, 2GB memory, and 20GB ephemeral storage. $ 72.08 Amazon Aurora MySQL-Compatible 1. Use db.t3.medium (2 vCPU, 4 GB memory). 2. A Multi-AZ DB cluster has a writer DB instance and a reader DB instances in two separate Availability Zones in the same AWS Region. 3. Pricing model is Reserved (1 year), purchase Option is All Upfront. 4. 50GB General Purpose SSD (gp2) storage, 30 Baseline IO rate per second, 100 Peak IO rate per second, and 60 Duration of peak IO activity hours per month. $ 103.12 Application Load Balancer 1. 100 GB per month for EC2 Instances and IP addresses as targets. 2. Average 40 new connections per second. $ 25.77 Total $ 200.97","title":"Example 2"},{"location":"implementation-guide/cost/#example-3","text":"Your database instance use Amazon Aurora Serverless MySQL-Compatible. The monthly cost of using this solution in the US East (N. Virginia) region is shown below: Service Dimensions Cost (MLY) AWS Fargate 1. 2 ECS Tasks that run for 24 hours every day. 2. Each ECS task uses 1 vCPU, 2GB memory, and 20GB ephemeral storage. $ 72.08 Amazon Aurora Serverless MySQL-Compatible 1. 12 ACUs per day. 2. 50GB database storage. 3. 30 Baseline IO rate per second, 100 Peak IO rate per second, and 60 Duration of peak IO activity hours per month. $ 67.59 Application Load Balancer 1. 100 GB per month for EC2 Instances and IP addresses as targets. 2. Average 40 new connections per second. $ 25.77 Total $ 165.44","title":"Example 3"},{"location":"implementation-guide/deployment/","text":"Before you launch the solution, review the architecture, supported regions, and other considerations discussed in this guide. Follow the step-by-step instructions in this section to configure and deploy the solution into your account. Time to deploy : Approximately 30 minutes Prerequisites Make sure you have the following in the target region you want to deploy the solution: the domain name has been recorded by ICP and used to apply for ACM certificate. the certificate of the domain name is created in ACM and verified by the domain name. VPC with 4 subnets (including two public subnets and two private subnets) and NAT Gateway. all the AWS Services listed in required AWS Services are available. Deployment Overview Use the following steps to deploy this solution on AWS. Step 1. Create ACM certificate Step 2. Validate domain ownership Step 3. Launch the stack Step 4. Create a record in Route 53 for resolving the domain name Step 5. Access the Keycloak web console Step 1. Create ACM certificate Keycloak is required to provide HTTPS service to ensure that Keycloak can connect to the Cognito Identity pool. This means that an ACM certificate or a third-party certificate must be used. For more information, refer to How to upload an SSL certificate and import it into AWS Identity and Access Management (IAM) . This guide illustrates the use of AWS Certificate Manager (ACM) as an example. For more information, refer to AWS Certificate Manager . Log in to the AWS Certificate Manager console. From the top navigation bar, select a Region where you want to deploy Keycloak. In the left navigation pane, choose List certificates . Choose Request . If you choose to deploy in the AWS Global Regions, choose Request Public certificate . If you choose to deploy in the AWS China Regions, only the option Request Public certificate is available, choose it. Then, choose Next . On the Request Public certificate page, do the following: In the Domain names section, enter your domain name for your Keycloak service, such as keycloak.yourdomain.com . In the Select validation method section, choose DNS validation - recommended . Choose Request . In the Certificates list, the Status of the new requested Certificate ID is Pending validation . Choose the new requested Certificate ID to show detailed metadata for a listed certificate. In the page that Log in tos, record the following information: ARN in the Certificate status section. CNAME name in the Domains section. CNAME value in the Domains section. Step 2. Validate domain ownership NOTE: The following is to verify domain ownership through Route 53. If you use other Domain Name System (DNS), refer to the DNS provider documentation to verify your domain name ownership. Add a CNAME record to Route 53 to authenticate that the domain name is owned and available to you. If no hosted zone has been created, refer to Configuring Amazon Route 53 as your DNS service . Log in to the Amazon Route 53 console. In the left navigation pane, choose Hosted zones . Choose Domain name to show detailed metadata for a listed Hosted zones. In the page that Log in tos, choose Create record , do the following: For Record name , enter the part of CNAME name recorded in Step 1. Create ACM certificate , such as _5db1a2688389b3b76ef6e2accaf9a85d.keycloak.yourdomain.com . For Record Type , choose CNAME . For Value , enter the CNAME value recorded in Step 1. Create ACM certificate , such as _1e9108227615sd40f3a767a9dc7a29cb.bpxxncpwjz.acm-validations.aws. . Choose Create records . Go back to AWS Certificate Manager console and wait for about 5 minutes. Click the Refresh button, and wait until Status of ACM certificate changed to Issued . Step 3. Launch the stack You have 4 different options to launch the stack. Option VPC Database Quick Launch Template Link Option 1: Deploy Keycloak based on Aurora Serverless MySQL-Compatible from an existing VPC Existing Aurora Serverless MySQL-Compatible Global China Download Option 2: Deploy Keycloak based on Aurora Serverless MySQL-Compatible from a new VPC New Aurora Serverless MySQL-Compatible Global China Download Option 3: Deploy Keycloak based on Aurora MySQL-Compatible from an existing VPC Existing Aurora MySQL-Compatible Global China Download Option 4: Deploy Keycloak based on Aurora MySQL-Compatible from a new VPC New Aurora MySQL-Compatible Global China Download Option 1: Deploy Keycloak based on Aurora Serverless MySQL-Compatible from an existing VPC Log in to the AWS CloudFormation console. In the left navigation pane, choose Stacks . Choose Create stacks , and choose With new resources(standard) . On the Step 1 Specify template section, do the following: For Prepare template , choose Template is ready . For Template source , choose Upload a template file . Choose Choose file , and select the template file, such as keycloak-aurora-serverless-from-existing-vpc.template . Choose Next . On the Step 2 Specify stack details section, do the following: Stack name : A stack name, such as KeycloakOnAWS . CertificateArn : Enter the ARN recorded in Step 1. Create ACM certificate , such as arn:aws:acm:us-west-2:1436237113227:certificate/571518b3-123b-4502-1ec3-3t2sae704272 . VpcId : Select from existing VPCs. PubSubnets : Select public subnets for ALB deployment. PrivSubnets : Select the private subnet for the ECS Task. DBSubnets : Select the private subnet for the database. MinContainers : Customize the minimum number of containers for the ECS, with a minimum value of 2. MaxContainers : Customize the maximum number of containers for the ECS, with a maximum value of 10. AutoScalingTargetCpuUtilization : The percentage of resource utilization that is ensured to be no higher, maximum 100. JavaOpts : JAVA_OPTS environment variable. Choose Next . On the Step 3 Configure Stack options section, you can add tags. Choose Next . Review the information for the stack. When you're satisfied with the settings, choose I acknowledge that AWS CloudFormation might create IAM resources . Choose Create stack . Option 2: Deploy Keycloak based on Aurora Serverless MySQL-Compatible from a new VPC Log in to the AWS CloudFormation console. In the left navigation pane, choose Stacks . Choose Create stacks , and choose With new resources(standard) . On the Step 1 Specify template section, do the following: For Prepare template , choose Template is ready . For Template source , choose Upload a template file . Choose Choose file , and select the template file, such as keycloak-aurora-serverless-from-new-vpc.template . Choose Next . On the Step 2 Specify stack details section, do the following: Stack name : A stack name, such as KeycloakOnAWS . CertificateArn : Enter the ARN recorded in Step 1. Create ACM certificate , such as arn:aws:acm:us-west-2:1436237113227:certificate/571518b3-123b-4502-1ec3-3t2sae704272 . MinContainers : Customize the minimum number of containers for the ECS, with a minimum value of 2. MaxContainers : Customize the maximum number of containers for the ECS, with a maximum value of 10. AutoScalingTargetCpuUtilization : The percentage of resource utilization that is ensured to be no higher, maximum 100. JavaOpts : JAVA_OPTS environment variable. Choose Next . On the Step 3 Configure Stack options section, you can add tags. Choose Next . Review the information for the stack. When you're satisfied with the settings, choose I acknowledge that AWS CloudFormation might create IAM resources . Choose Create stack . Option 3: Deploy Keycloak based on Aurora MySQL-Compatible from an existing VPC Log in to the AWS CloudFormation console. In the left navigation pane, choose Stacks . Choose Create stacks , and choose With new resources(standard) . On the Step 1 Specify template section, do the following: For Prepare template , choose Template is ready . For Template source , choose Upload a template file . Choose Choose file , and select the template file, such as keycloak-from-existing-vpc.template . Choose Next . On the Step 2 Specify stack details section, do the following: Stack name : A stack name, such as KeycloakOnAWS . CertificateArn : Enter the ARN recorded in Step 1. Create ACM certificate , such as arn:aws:acm:us-west-2:1436237113227:certificate/571518b3-123b-4502-1ec3-3t2sae704272 . DatabaseInstanceType : Select the RDS instance type. VpcId : Select from existing VPCs. PubSubnets : Select public subnets for ALB deployment. PrivSubnets : Select the private subnet for the ECS Task. DBSubnets : Select the private subnet for the RDS database. MinContainers : Customize the minimum number of containers for the ECS, with a minimum value of 2. MaxContainers : Customize the maximum number of containers for the ECS, with a maximum value of 10. AutoScalingTargetCpuUtilization : The percentage of resource utilization that is ensured to be no higher, maximum 100. JavaOpts : JAVA_OPTS environment variable. Choose Next . On the Step 3 Configure Stack options section, you can add tags. Choose Next . Review the information for the stack. When you're satisfied with the settings, choose I acknowledge that AWS CloudFormation might create IAM resources . Choose Create stack . Option 4: Deploy Keycloak based on Aurora MySQL-Compatible from a new VPC Log in to the AWS CloudFormation console. In the left navigation pane, choose Stacks . Choose Create stacks , and choose With new resources(standard) . On the Step 1 Specify template section, do the following: For Prepare template , choose Template is ready . For Template source , choose Upload a template file . Choose Choose file , and select the template file, such as keycloak-from-new-vpc.template . Choose Next . On the Step 2 Specify stack details section, do the following: Stack name : A stack name, such as KeycloakOnAWS . CertificateArn : Enter the ARN recorded in Step 1. Create ACM certificate , such as arn:aws:acm:us-west-2:1436237113227:certificate/571518b3-123b-4502-1ec3-3t2sae704272` . DatabaseInstanceType : Select the RDS instance type. MinContainers : Customize the minimum number of containers for the ECS, with a minimum value of 2. MaxContainers : Customize the maximum number of containers for the ECS, with a maximum value of 10. AutoScalingTargetCpuUtilization : The percentage of resource utilization that is ensured to be no higher, maximum 100. JavaOpts : JAVA_OPTS environment variable. Choose Next . On the Step 3 Configure Stack options section, you can add tags. Choose Next . Review the information for the stack. When you're satisfied with the settings, choose I acknowledge that AWS CloudFormation might create IAM resources . Choose Create stack . Step 4. Create a record in Route 53 for resolving the domain name Log in to the AWS CloudFormation console. In the left navigation pane, choose Stacks . Choose the new created Stack name to show detailed metadata, such as KeycloakOnAWS . Choose Outputs . Enter KeyCloakKeyCloakContainerSerivceEndpointURL in the Filter box, and click Enter. List filtered result, such as KeyCloakKeyCloakContainerSerivceEndpointURL9C81E19A . Copied the Value , such as Keycl-KeyCl-1WIJGTSV19UTB-541714271.xx-xxx-1.elb.amazonaws.com . Log in to the Amazon Route 53 console. In the left navigation pane, choose Hosted zones . Choose Domain name to show detailed metadata for a listed Hosted zones. A page Log in tos, choose Create record , do the following: For Record name , enter subdomain for your keycloak services, such as keycloak.yourdomain.com . For Record Type , choose CNAME . For Value , paste the DNS name copied earlier, such as Keycl-KeyCl-1WIJGTSV19UTB-541714271.xx-xxx-1.elb.amazonaws.com . Choose Create records . Step 5. Access the Keycloak web console Log in to the AWS Secrets Manager console. From the top navigation bar, select the Region where your keycloak deployed. In the left navigation pane, choose Secrets . Enter KeyCloakKCSecret in the Filter box, and click Enter. Choose filtered results, such as KeyCloakKCSecretF8498E5C-VVSujKlsllRI . Choose Retrieve secret value in the Secret value section. Copy the username and password . Enter your keycloak domain name in the address bar of your browser, such as https://keycloak.yourdomain.com . Click the Administration Console link. Enter username and password copied earlier, and click Sign In .","title":"Deployment"},{"location":"implementation-guide/deployment/#prerequisites","text":"Make sure you have the following in the target region you want to deploy the solution: the domain name has been recorded by ICP and used to apply for ACM certificate. the certificate of the domain name is created in ACM and verified by the domain name. VPC with 4 subnets (including two public subnets and two private subnets) and NAT Gateway. all the AWS Services listed in required AWS Services are available.","title":"Prerequisites"},{"location":"implementation-guide/deployment/#deployment-overview","text":"Use the following steps to deploy this solution on AWS. Step 1. Create ACM certificate Step 2. Validate domain ownership Step 3. Launch the stack Step 4. Create a record in Route 53 for resolving the domain name Step 5. Access the Keycloak web console","title":"Deployment Overview"},{"location":"implementation-guide/deployment/#step-1-create-acm-certificate","text":"Keycloak is required to provide HTTPS service to ensure that Keycloak can connect to the Cognito Identity pool. This means that an ACM certificate or a third-party certificate must be used. For more information, refer to How to upload an SSL certificate and import it into AWS Identity and Access Management (IAM) . This guide illustrates the use of AWS Certificate Manager (ACM) as an example. For more information, refer to AWS Certificate Manager . Log in to the AWS Certificate Manager console. From the top navigation bar, select a Region where you want to deploy Keycloak. In the left navigation pane, choose List certificates . Choose Request . If you choose to deploy in the AWS Global Regions, choose Request Public certificate . If you choose to deploy in the AWS China Regions, only the option Request Public certificate is available, choose it. Then, choose Next . On the Request Public certificate page, do the following: In the Domain names section, enter your domain name for your Keycloak service, such as keycloak.yourdomain.com . In the Select validation method section, choose DNS validation - recommended . Choose Request . In the Certificates list, the Status of the new requested Certificate ID is Pending validation . Choose the new requested Certificate ID to show detailed metadata for a listed certificate. In the page that Log in tos, record the following information: ARN in the Certificate status section. CNAME name in the Domains section. CNAME value in the Domains section.","title":"Step 1. Create ACM certificate"},{"location":"implementation-guide/deployment/#step-2-validate-domain-ownership","text":"NOTE: The following is to verify domain ownership through Route 53. If you use other Domain Name System (DNS), refer to the DNS provider documentation to verify your domain name ownership. Add a CNAME record to Route 53 to authenticate that the domain name is owned and available to you. If no hosted zone has been created, refer to Configuring Amazon Route 53 as your DNS service . Log in to the Amazon Route 53 console. In the left navigation pane, choose Hosted zones . Choose Domain name to show detailed metadata for a listed Hosted zones. In the page that Log in tos, choose Create record , do the following: For Record name , enter the part of CNAME name recorded in Step 1. Create ACM certificate , such as _5db1a2688389b3b76ef6e2accaf9a85d.keycloak.yourdomain.com . For Record Type , choose CNAME . For Value , enter the CNAME value recorded in Step 1. Create ACM certificate , such as _1e9108227615sd40f3a767a9dc7a29cb.bpxxncpwjz.acm-validations.aws. . Choose Create records . Go back to AWS Certificate Manager console and wait for about 5 minutes. Click the Refresh button, and wait until Status of ACM certificate changed to Issued .","title":"Step 2. Validate domain ownership"},{"location":"implementation-guide/deployment/#step-3-launch-the-stack","text":"You have 4 different options to launch the stack. Option VPC Database Quick Launch Template Link Option 1: Deploy Keycloak based on Aurora Serverless MySQL-Compatible from an existing VPC Existing Aurora Serverless MySQL-Compatible Global China Download Option 2: Deploy Keycloak based on Aurora Serverless MySQL-Compatible from a new VPC New Aurora Serverless MySQL-Compatible Global China Download Option 3: Deploy Keycloak based on Aurora MySQL-Compatible from an existing VPC Existing Aurora MySQL-Compatible Global China Download Option 4: Deploy Keycloak based on Aurora MySQL-Compatible from a new VPC New Aurora MySQL-Compatible Global China Download","title":"Step 3. Launch the stack"},{"location":"implementation-guide/deployment/#option-1-deploy-keycloak-based-on-aurora-serverless-mysql-compatible-from-an-existing-vpc","text":"Log in to the AWS CloudFormation console. In the left navigation pane, choose Stacks . Choose Create stacks , and choose With new resources(standard) . On the Step 1 Specify template section, do the following: For Prepare template , choose Template is ready . For Template source , choose Upload a template file . Choose Choose file , and select the template file, such as keycloak-aurora-serverless-from-existing-vpc.template . Choose Next . On the Step 2 Specify stack details section, do the following: Stack name : A stack name, such as KeycloakOnAWS . CertificateArn : Enter the ARN recorded in Step 1. Create ACM certificate , such as arn:aws:acm:us-west-2:1436237113227:certificate/571518b3-123b-4502-1ec3-3t2sae704272 . VpcId : Select from existing VPCs. PubSubnets : Select public subnets for ALB deployment. PrivSubnets : Select the private subnet for the ECS Task. DBSubnets : Select the private subnet for the database. MinContainers : Customize the minimum number of containers for the ECS, with a minimum value of 2. MaxContainers : Customize the maximum number of containers for the ECS, with a maximum value of 10. AutoScalingTargetCpuUtilization : The percentage of resource utilization that is ensured to be no higher, maximum 100. JavaOpts : JAVA_OPTS environment variable. Choose Next . On the Step 3 Configure Stack options section, you can add tags. Choose Next . Review the information for the stack. When you're satisfied with the settings, choose I acknowledge that AWS CloudFormation might create IAM resources . Choose Create stack .","title":"Option 1: Deploy Keycloak based on Aurora Serverless MySQL-Compatible from an existing VPC"},{"location":"implementation-guide/deployment/#option-2-deploy-keycloak-based-on-aurora-serverless-mysql-compatible-from-a-new-vpc","text":"Log in to the AWS CloudFormation console. In the left navigation pane, choose Stacks . Choose Create stacks , and choose With new resources(standard) . On the Step 1 Specify template section, do the following: For Prepare template , choose Template is ready . For Template source , choose Upload a template file . Choose Choose file , and select the template file, such as keycloak-aurora-serverless-from-new-vpc.template . Choose Next . On the Step 2 Specify stack details section, do the following: Stack name : A stack name, such as KeycloakOnAWS . CertificateArn : Enter the ARN recorded in Step 1. Create ACM certificate , such as arn:aws:acm:us-west-2:1436237113227:certificate/571518b3-123b-4502-1ec3-3t2sae704272 . MinContainers : Customize the minimum number of containers for the ECS, with a minimum value of 2. MaxContainers : Customize the maximum number of containers for the ECS, with a maximum value of 10. AutoScalingTargetCpuUtilization : The percentage of resource utilization that is ensured to be no higher, maximum 100. JavaOpts : JAVA_OPTS environment variable. Choose Next . On the Step 3 Configure Stack options section, you can add tags. Choose Next . Review the information for the stack. When you're satisfied with the settings, choose I acknowledge that AWS CloudFormation might create IAM resources . Choose Create stack .","title":"Option 2: Deploy Keycloak based on Aurora Serverless MySQL-Compatible from a new VPC"},{"location":"implementation-guide/deployment/#option-3-deploy-keycloak-based-on-aurora-mysql-compatible-from-an-existing-vpc","text":"Log in to the AWS CloudFormation console. In the left navigation pane, choose Stacks . Choose Create stacks , and choose With new resources(standard) . On the Step 1 Specify template section, do the following: For Prepare template , choose Template is ready . For Template source , choose Upload a template file . Choose Choose file , and select the template file, such as keycloak-from-existing-vpc.template . Choose Next . On the Step 2 Specify stack details section, do the following: Stack name : A stack name, such as KeycloakOnAWS . CertificateArn : Enter the ARN recorded in Step 1. Create ACM certificate , such as arn:aws:acm:us-west-2:1436237113227:certificate/571518b3-123b-4502-1ec3-3t2sae704272 . DatabaseInstanceType : Select the RDS instance type. VpcId : Select from existing VPCs. PubSubnets : Select public subnets for ALB deployment. PrivSubnets : Select the private subnet for the ECS Task. DBSubnets : Select the private subnet for the RDS database. MinContainers : Customize the minimum number of containers for the ECS, with a minimum value of 2. MaxContainers : Customize the maximum number of containers for the ECS, with a maximum value of 10. AutoScalingTargetCpuUtilization : The percentage of resource utilization that is ensured to be no higher, maximum 100. JavaOpts : JAVA_OPTS environment variable. Choose Next . On the Step 3 Configure Stack options section, you can add tags. Choose Next . Review the information for the stack. When you're satisfied with the settings, choose I acknowledge that AWS CloudFormation might create IAM resources . Choose Create stack .","title":"Option 3: Deploy Keycloak based on Aurora MySQL-Compatible from an existing VPC"},{"location":"implementation-guide/deployment/#option-4-deploy-keycloak-based-on-aurora-mysql-compatible-from-a-new-vpc","text":"Log in to the AWS CloudFormation console. In the left navigation pane, choose Stacks . Choose Create stacks , and choose With new resources(standard) . On the Step 1 Specify template section, do the following: For Prepare template , choose Template is ready . For Template source , choose Upload a template file . Choose Choose file , and select the template file, such as keycloak-from-new-vpc.template . Choose Next . On the Step 2 Specify stack details section, do the following: Stack name : A stack name, such as KeycloakOnAWS . CertificateArn : Enter the ARN recorded in Step 1. Create ACM certificate , such as arn:aws:acm:us-west-2:1436237113227:certificate/571518b3-123b-4502-1ec3-3t2sae704272` . DatabaseInstanceType : Select the RDS instance type. MinContainers : Customize the minimum number of containers for the ECS, with a minimum value of 2. MaxContainers : Customize the maximum number of containers for the ECS, with a maximum value of 10. AutoScalingTargetCpuUtilization : The percentage of resource utilization that is ensured to be no higher, maximum 100. JavaOpts : JAVA_OPTS environment variable. Choose Next . On the Step 3 Configure Stack options section, you can add tags. Choose Next . Review the information for the stack. When you're satisfied with the settings, choose I acknowledge that AWS CloudFormation might create IAM resources . Choose Create stack .","title":"Option 4: Deploy Keycloak based on Aurora MySQL-Compatible from a new VPC"},{"location":"implementation-guide/deployment/#step-4-create-a-record-in-route-53-for-resolving-the-domain-name","text":"Log in to the AWS CloudFormation console. In the left navigation pane, choose Stacks . Choose the new created Stack name to show detailed metadata, such as KeycloakOnAWS . Choose Outputs . Enter KeyCloakKeyCloakContainerSerivceEndpointURL in the Filter box, and click Enter. List filtered result, such as KeyCloakKeyCloakContainerSerivceEndpointURL9C81E19A . Copied the Value , such as Keycl-KeyCl-1WIJGTSV19UTB-541714271.xx-xxx-1.elb.amazonaws.com . Log in to the Amazon Route 53 console. In the left navigation pane, choose Hosted zones . Choose Domain name to show detailed metadata for a listed Hosted zones. A page Log in tos, choose Create record , do the following: For Record name , enter subdomain for your keycloak services, such as keycloak.yourdomain.com . For Record Type , choose CNAME . For Value , paste the DNS name copied earlier, such as Keycl-KeyCl-1WIJGTSV19UTB-541714271.xx-xxx-1.elb.amazonaws.com . Choose Create records .","title":"Step 4. Create a record in Route 53 for resolving the domain name"},{"location":"implementation-guide/deployment/#step-5-access-the-keycloak-web-console","text":"Log in to the AWS Secrets Manager console. From the top navigation bar, select the Region where your keycloak deployed. In the left navigation pane, choose Secrets . Enter KeyCloakKCSecret in the Filter box, and click Enter. Choose filtered results, such as KeyCloakKCSecretF8498E5C-VVSujKlsllRI . Choose Retrieve secret value in the Secret value section. Copy the username and password . Enter your keycloak domain name in the address bar of your browser, such as https://keycloak.yourdomain.com . Click the Administration Console link. Enter username and password copied earlier, and click Sign In .","title":"Step 5. Access the Keycloak web console"},{"location":"implementation-guide/revisions/","text":"Revisions Date Description July 2022 Release 2.1.0 1. Upgrade Keycloak to version 16.1.1 2. Upgrade aws-cdk to version 1.160.0 3. Upgrade cdk-keycloak to version 0.2.41","title":"Revisions"},{"location":"implementation-guide/revisions/#revisions","text":"Date Description July 2022 Release 2.1.0 1. Upgrade Keycloak to version 16.1.1 2. Upgrade aws-cdk to version 1.160.0 3. Upgrade cdk-keycloak to version 0.2.41","title":"Revisions"},{"location":"implementation-guide/tutorials/ad-ldap/","text":"Tutorial: How to integrate Keycloak with AD/LDAP? Keycloak allows user federation with AD/LDAP. This guide walks you through the user federation with OpenLDAP service. For more information, see User Federation from the Keycloak documentation. Keycloak supports multiple LDAP services including Microsoft AD and OpenLDAP. The following tutorial will run an OpenLDAP service in the same VPC with the Keycloak service. Prerequisites You have already deployed the solution via CloudFormation or AWS CDK and already successfully logged in to the Keycload dashboard as Keycloak admin user. Steps Step 1. Launch an EC2 instance for OpenLDAP Step 2. Install OpenLDAP Step 3. Create a User Federation on Keycloak Step 4. Validate the user federation Step 1. Launch an EC2 instance for OpenLDAP You need to launch an EC2 instance in the same VPC with your Keycloak service, and do the following to configure the security group of this EC2 instance and ensure all traffic from the VPC CIDR can access its LDAP port (TCP 389). Log in to the Amazon EC2 console. In the left navigation pane, choose Security Groups . Enter KeyCloakKeyCloakContainer in the Filter box, and click Enter, then copy the Security group ID , such as sg-0121f1140bbfd72c6 . Choose the Security Groups where your EC2 instance is located, and add an Inbound rules to allow ECS access to OpenLDAP. Choose Save rules . Step 2. Install OpenLDAP Install OpenLDAP with Docker in your EC2 instance. Connect to your instance. Do the following: # Install docker yum install -y docker systemctl start docker # start the docker container docker run -p 389:1389 public.ecr.aws/bitnami/openldap:latest Open another terminal and install the OpenLDAP clients. # install ldap client yum install -y openldap-clients # list all users ldapsearch -x -b \"ou=users,dc=example,dc=org\" -H ldap://<EC2_PRIVATE_IP> For example: [root@xxxx ~]# ldapsearch -x -b \"ou=users,dc=example,dc=org\" -H ldap://<EC2_PRIVATE_IP> # extended LDIF # # LDAPv3 # base <ou=users,dc=example,dc=org> with scope subtree # filter: (objectclass=*) # requesting: ALL # # users, example.org dn: ou=users,dc=example,dc=org objectClass: organizationalUnit ou: users # user01, users, example.org dn: cn=user01,ou=users,dc=example,dc=org cn: User1 cn: user01 sn: Bar1 objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount userPassword:: Yml0bmFtaTE= uid: user01 uidNumber: 1000 gidNumber: 1000 homeDirectory: /home/user01 # user02, users, example.org dn: cn=user02,ou=users,dc=example,dc=org cn: User2 cn: user02 sn: Bar2 objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount userPassword:: Yml0bmFtaTI= uid: user02 uidNumber: 1001 gidNumber: 1001 homeDirectory: /home/user02 # readers, users, example.org dn: cn=readers,ou=users,dc=example,dc=org cn: readers objectClass: groupOfNames member: cn=user01,ou=users,dc=example,dc=org member: cn=user02,ou=users,dc=example,dc=org # search result search: 2 result: 0 Success # numResponses: 5 # numEntries: 4 Now your default LDAP service is ready. Step 3. Create a User Federation on Keycloak Log in to the Keycloak dashboard as Keycloak admin user. In the left navigation pane, choose User Federation . Click the Add provider drop-down menu, and choose ldap . In the page that opens, enter the following information: Edit Mode : Choose WRITABLE . Vendor : Choose Other . Username LDAP attribute : Enter your LDAP attribute name for username, use cn in this tutorial. RDN LDAP attribute : Enter your LDAP attribute name for user RDN, use cn in this tutorial. UUID LDAP attribute : Enter your LDAP attribute name for UUID, use uid in this tutorial. User Object Classes : Enter your LDAP User Object Classes, use inetOrgPerson, posixAccount, shadowAccount in this tutorial. Connection URL : Enter your LDAP connection URL, use ldap://<EC2_PRIVATE_IP> in this tutorial, and click Test connection , Prompt the following information \"Success! LDAP connection successful.\". Users DN : Enter your LDAP Users DN, use ou=users,dc=example,dc=org in this tutorial. Bind Type : Choose simple . Bind DN : Enter your LDAP bind DN, use cn=admin,dc=example,dc=org in this tutorial. Bind Credential : Enter your LDAP Bind Credentials, use adminpassword in this tutorial, and click Test authentication , Prompt the following information \"Success! LDAP authentication successful.\". Choose Save . Choose Synchronize all users . The following information prompts \"Success! Sync of users finished successfully. 2 imported users, 0 updated users\". In the left navigation pane, choose Users . Choose View all users , user1 and user2 should be imported successfully. Step 4. Validate the User federation Now you can validate the User Federation with the account-console login. Log in to the Keycloak dashboard as Keycloak admin user. In the left navigation pane, choose Clients . Click the Base URL of account-console. On the Keycloak account console you have been redirected, click Sign In in the upper right corner. Enter user1 to Username or email, enter bitnami1 to Password. Click Sign In to login to the console. FAQ 1. Does Keycloak support LDAPS protocol? Yes. both ldap:// and ldaps:// are supported. To enable ldaps://, make sure your AD/LDAP is running with LDAPS and has properly imported the certificate. 2. What vendor type should I select if I am running Microsoft AD server? Select Active Directory from the Vendor list.","title":"How to integrate Keycloak with AD/LDAP?"},{"location":"implementation-guide/tutorials/ad-ldap/#tutorial-how-to-integrate-keycloak-with-adldap","text":"Keycloak allows user federation with AD/LDAP. This guide walks you through the user federation with OpenLDAP service. For more information, see User Federation from the Keycloak documentation. Keycloak supports multiple LDAP services including Microsoft AD and OpenLDAP. The following tutorial will run an OpenLDAP service in the same VPC with the Keycloak service.","title":"Tutorial: How to integrate Keycloak with AD/LDAP?"},{"location":"implementation-guide/tutorials/ad-ldap/#prerequisites","text":"You have already deployed the solution via CloudFormation or AWS CDK and already successfully logged in to the Keycload dashboard as Keycloak admin user.","title":"Prerequisites"},{"location":"implementation-guide/tutorials/ad-ldap/#steps","text":"Step 1. Launch an EC2 instance for OpenLDAP Step 2. Install OpenLDAP Step 3. Create a User Federation on Keycloak Step 4. Validate the user federation","title":"Steps"},{"location":"implementation-guide/tutorials/ad-ldap/#step-1-launch-an-ec2-instance-for-openldap","text":"You need to launch an EC2 instance in the same VPC with your Keycloak service, and do the following to configure the security group of this EC2 instance and ensure all traffic from the VPC CIDR can access its LDAP port (TCP 389). Log in to the Amazon EC2 console. In the left navigation pane, choose Security Groups . Enter KeyCloakKeyCloakContainer in the Filter box, and click Enter, then copy the Security group ID , such as sg-0121f1140bbfd72c6 . Choose the Security Groups where your EC2 instance is located, and add an Inbound rules to allow ECS access to OpenLDAP. Choose Save rules .","title":"Step 1. Launch an EC2 instance for OpenLDAP"},{"location":"implementation-guide/tutorials/ad-ldap/#step-2-install-openldap","text":"Install OpenLDAP with Docker in your EC2 instance. Connect to your instance. Do the following: # Install docker yum install -y docker systemctl start docker # start the docker container docker run -p 389:1389 public.ecr.aws/bitnami/openldap:latest Open another terminal and install the OpenLDAP clients. # install ldap client yum install -y openldap-clients # list all users ldapsearch -x -b \"ou=users,dc=example,dc=org\" -H ldap://<EC2_PRIVATE_IP> For example: [root@xxxx ~]# ldapsearch -x -b \"ou=users,dc=example,dc=org\" -H ldap://<EC2_PRIVATE_IP> # extended LDIF # # LDAPv3 # base <ou=users,dc=example,dc=org> with scope subtree # filter: (objectclass=*) # requesting: ALL # # users, example.org dn: ou=users,dc=example,dc=org objectClass: organizationalUnit ou: users # user01, users, example.org dn: cn=user01,ou=users,dc=example,dc=org cn: User1 cn: user01 sn: Bar1 objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount userPassword:: Yml0bmFtaTE= uid: user01 uidNumber: 1000 gidNumber: 1000 homeDirectory: /home/user01 # user02, users, example.org dn: cn=user02,ou=users,dc=example,dc=org cn: User2 cn: user02 sn: Bar2 objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount userPassword:: Yml0bmFtaTI= uid: user02 uidNumber: 1001 gidNumber: 1001 homeDirectory: /home/user02 # readers, users, example.org dn: cn=readers,ou=users,dc=example,dc=org cn: readers objectClass: groupOfNames member: cn=user01,ou=users,dc=example,dc=org member: cn=user02,ou=users,dc=example,dc=org # search result search: 2 result: 0 Success # numResponses: 5 # numEntries: 4 Now your default LDAP service is ready.","title":"Step 2. Install OpenLDAP"},{"location":"implementation-guide/tutorials/ad-ldap/#step-3-create-a-user-federation-on-keycloak","text":"Log in to the Keycloak dashboard as Keycloak admin user. In the left navigation pane, choose User Federation . Click the Add provider drop-down menu, and choose ldap . In the page that opens, enter the following information: Edit Mode : Choose WRITABLE . Vendor : Choose Other . Username LDAP attribute : Enter your LDAP attribute name for username, use cn in this tutorial. RDN LDAP attribute : Enter your LDAP attribute name for user RDN, use cn in this tutorial. UUID LDAP attribute : Enter your LDAP attribute name for UUID, use uid in this tutorial. User Object Classes : Enter your LDAP User Object Classes, use inetOrgPerson, posixAccount, shadowAccount in this tutorial. Connection URL : Enter your LDAP connection URL, use ldap://<EC2_PRIVATE_IP> in this tutorial, and click Test connection , Prompt the following information \"Success! LDAP connection successful.\". Users DN : Enter your LDAP Users DN, use ou=users,dc=example,dc=org in this tutorial. Bind Type : Choose simple . Bind DN : Enter your LDAP bind DN, use cn=admin,dc=example,dc=org in this tutorial. Bind Credential : Enter your LDAP Bind Credentials, use adminpassword in this tutorial, and click Test authentication , Prompt the following information \"Success! LDAP authentication successful.\". Choose Save . Choose Synchronize all users . The following information prompts \"Success! Sync of users finished successfully. 2 imported users, 0 updated users\". In the left navigation pane, choose Users . Choose View all users , user1 and user2 should be imported successfully.","title":"Step 3. Create a User Federation on Keycloak"},{"location":"implementation-guide/tutorials/ad-ldap/#step-4-validate-the-user-federation","text":"Now you can validate the User Federation with the account-console login. Log in to the Keycloak dashboard as Keycloak admin user. In the left navigation pane, choose Clients . Click the Base URL of account-console. On the Keycloak account console you have been redirected, click Sign In in the upper right corner. Enter user1 to Username or email, enter bitnami1 to Password. Click Sign In to login to the console.","title":"Step 4. Validate the User federation"},{"location":"implementation-guide/tutorials/ad-ldap/#faq","text":"1. Does Keycloak support LDAPS protocol? Yes. both ldap:// and ldaps:// are supported. To enable ldaps://, make sure your AD/LDAP is running with LDAPS and has properly imported the certificate. 2. What vendor type should I select if I am running Microsoft AD server? Select Active Directory from the Vendor list.","title":"FAQ"},{"location":"implementation-guide/tutorials/api-gateway/","text":"Tutorial: How to integrate Keycloak with Amazon API Gateway? This tutorial demonstrates how to control permissions for different users to access different API interfaces through Keycloak. For more information, see Authorization Services from the Keycloak document. Architecture Prerequisites You have already deployed the keycloak-on-aws via CloudFormation or AWS CDK and already successfully logged in the Keycload dashboard as Keycloak admin user. Make sure your have the following JAVA_OPTS filled in CloudFormation parameter. -Dkeycloak.profile.feature.scripts=enabled -Dkeycloak.profile.feature.upload_scripts=enabled Deployment Overview Use the following steps to deploy this solution on AWS. Step 1. Git clone keycloak-on-aws Step 2. Import the Keycloak example config Step 3. Run serverless-express-auth locally Step 4. Run Vue UI locally Step 5. Validate the User Permissions Step 1. Git clone keycloak-on-aws Download the keycloak-on-aws code locally. git clone https://github.com/aws-samples/keycloak-on-aws.git cd keycloak-on-aws Step 2. Import the Keycloak example config Login the Keycloak dashboard as keycloak admin user. Hover over the Master in the left navigation pane, and choose Add realm . Choose Select file , and select tutorials/api-gateway/resoures/realm-export.json in your git downloaded code. Choose Create . Step 3. Run serverless-express-auth locally This example is mainly based on expressjs and official keycloak-nodejs-connect . And using serverless-express to make expressjs be able to run on lambda. The advantage of this way is keycloak-nodejs-connect is maintained by keycloak team and it is the recommended way to connect to keycloak. Notice: The document of keycloak-nodejs-connect is at https://www.keycloak.org/docs/latest/securing_apps/#_nodejs_adapter Login the Keycloak dashboard as keycloak admin user. In the left navigation pane, and choose Clients . Choose vue to show detailed metadata. Choose Installation . Click Format Option , choose Keycloak OIDC JSON . According to keycloak client installation config to update tutorials/api-gateway/resources/realm-export.json in your git downloaded code. { \"realm\": \"keycloak-on-aws\", \"auth-server-url\": \"https://keycloak.yourdomain.com/auth/\", \"ssl-required\": \"external\", \"resource\": \"vue\", \"public-client\": true, \"confidential-port\": 0, // Don't remove the following line, this is for vue-ui to contact to api gw !!! \"x-api-gw-url\": \"http://localhost:3003/dev/hello\" } Go to tutorials/api-gateway/serverless-express-auth directory, do the following. cd tutorials/api-gateway/serverless-express-auth yarn yarn offline Sample Output yarn run v1.22.19 $ SLS_DEBUG=* serverless offline --host 0.0.0.0 --httpPort 3003 --lambdaPort=3019 ... offline: Offline [http for lambda] listening on http://0.0.0.0:3019 offline: Function names exposed for local invocation by aws-sdk: * authEndpoint: serverless-express-auth-dev-authEndpoint * hello: serverless-express-auth-dev-hello [offline] Lambda Invocation Routes (for AWS SDK or AWS CLI): * POST http://0.0.0.0:3019/2015-03-31/functions/serverless-express-auth-dev-authEndpoint/invocations * POST http://0.0.0.0:3019/2015-03-31/functions/serverless-express-auth-dev-hello/invocations [offline] Lambda Async Invocation Routes (for AWS SDK or AWS CLI): * POST http://0.0.0.0:3019/2014-11-13/functions/serverless-express-auth-dev-authEndpoint/invoke-async/ * POST http://0.0.0.0:3019/2014-11-13/functions/serverless-express-auth-dev-hello/invoke-async/ offline: Configuring Authorization: hello authEndpoint [offline] Creating Authorization scheme for hello-authEndpoint-GET-hello \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 GET | http://0.0.0.0:3003/dev/hello \u2502 \u2502 POST | http://0.0.0.0:3003/2015-03-31/functions/hello/invocations \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 offline: [HTTP] server ready: http://0.0.0.0:3003 \ud83d\ude80 offline: offline: Enter \"rp\" to replay the last request Step 4. Run Vue UI locally cd tutorials/api-gateway/vue-ui yarn yarn serve Sample Output yarn run v1.22.19 $ vue-cli-service serve Browserslist: caniuse-lite is outdated. Please run: npx browserslist@latest --update-db Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating INFO Starting development server... Starting type checking service... Using 1 worker with 2048MB memory limit 98% after emitting CopyPlugin DONE Compiled successfully in 1638ms 3:42:04 PM No type errors found Version: typescript 4.2.4 Time: 1111ms App running at: - Local: http://localhost:8080/ - Network: http://localhost:8080/ Note that the development build is not optimized. To create a production build, run yarn build. Step 5. Validate the User Permissions A common scenario is, different users have different permissions to perform an action (allow/deny). We have built in two different users, user1 is allowed to call API GW while user2 is not. Users: user password realm role desription user1 user1 call-api user1 is permited to call api gateway user2 user2 - user2 is not permited to call api gateway Log in to the Vue UI console, such as http://localhost:8080/ . Choose Login . Enter user1 to Username or email, enter user1 to Password. Choose Sign In . Choose Request , you will get the following response message, the response will be successfully. { \"url\": \"http://localhost:3003/dev/hello\", \"status\": 200, \"statusText\": \"OK\", \"data\": { \"message\": \"Hello World from protect server\" } } Choose Logout . Enter user2 to Username or email, enter user2 to Password. Choose Sign In . Choose Request , you will get the following response message, the response will fail. { \"url\": \"http://localhost:3003/dev/hello\", \"status\": 401, \"statusText\": \"Unauthorized\", \"data\": { \"statusCode\": 401, \"error\": \"Unauthorized\", \"message\": \"Unauthorized\" } } FAQ 1. How to export Keycloak realm users? Run the following command to export Keycloak realm users: $ docker exec <container id> $ /opt/jboss/keycloak/bin/standalone.sh -Dkeycloak.migration.action=export -Dkeycloak.migration.realmName=keycloak-on-aws -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=realm-export.json -Djboss.socket.binding.port-offset=99 For more information, refer to https://stackoverflow.com/questions/60766292/how-to-get-keycloak-to-export-realm-users-and-then-exit .","title":"How to integrate Keycloak with Amazon API Gateway?"},{"location":"implementation-guide/tutorials/api-gateway/#tutorial-how-to-integrate-keycloak-with-amazon-api-gateway","text":"This tutorial demonstrates how to control permissions for different users to access different API interfaces through Keycloak. For more information, see Authorization Services from the Keycloak document.","title":"Tutorial: How to integrate Keycloak with Amazon API Gateway?"},{"location":"implementation-guide/tutorials/api-gateway/#architecture","text":"","title":"Architecture"},{"location":"implementation-guide/tutorials/api-gateway/#prerequisites","text":"You have already deployed the keycloak-on-aws via CloudFormation or AWS CDK and already successfully logged in the Keycload dashboard as Keycloak admin user. Make sure your have the following JAVA_OPTS filled in CloudFormation parameter. -Dkeycloak.profile.feature.scripts=enabled -Dkeycloak.profile.feature.upload_scripts=enabled","title":"Prerequisites"},{"location":"implementation-guide/tutorials/api-gateway/#deployment-overview","text":"Use the following steps to deploy this solution on AWS. Step 1. Git clone keycloak-on-aws Step 2. Import the Keycloak example config Step 3. Run serverless-express-auth locally Step 4. Run Vue UI locally Step 5. Validate the User Permissions","title":"Deployment Overview"},{"location":"implementation-guide/tutorials/api-gateway/#step-1-git-clone-keycloak-on-aws","text":"Download the keycloak-on-aws code locally. git clone https://github.com/aws-samples/keycloak-on-aws.git cd keycloak-on-aws","title":"Step 1. Git clone keycloak-on-aws"},{"location":"implementation-guide/tutorials/api-gateway/#step-2-import-the-keycloak-example-config","text":"Login the Keycloak dashboard as keycloak admin user. Hover over the Master in the left navigation pane, and choose Add realm . Choose Select file , and select tutorials/api-gateway/resoures/realm-export.json in your git downloaded code. Choose Create .","title":"Step 2. Import the Keycloak example config"},{"location":"implementation-guide/tutorials/api-gateway/#step-3-run-serverless-express-auth-locally","text":"This example is mainly based on expressjs and official keycloak-nodejs-connect . And using serverless-express to make expressjs be able to run on lambda. The advantage of this way is keycloak-nodejs-connect is maintained by keycloak team and it is the recommended way to connect to keycloak. Notice: The document of keycloak-nodejs-connect is at https://www.keycloak.org/docs/latest/securing_apps/#_nodejs_adapter Login the Keycloak dashboard as keycloak admin user. In the left navigation pane, and choose Clients . Choose vue to show detailed metadata. Choose Installation . Click Format Option , choose Keycloak OIDC JSON . According to keycloak client installation config to update tutorials/api-gateway/resources/realm-export.json in your git downloaded code. { \"realm\": \"keycloak-on-aws\", \"auth-server-url\": \"https://keycloak.yourdomain.com/auth/\", \"ssl-required\": \"external\", \"resource\": \"vue\", \"public-client\": true, \"confidential-port\": 0, // Don't remove the following line, this is for vue-ui to contact to api gw !!! \"x-api-gw-url\": \"http://localhost:3003/dev/hello\" } Go to tutorials/api-gateway/serverless-express-auth directory, do the following. cd tutorials/api-gateway/serverless-express-auth yarn yarn offline Sample Output yarn run v1.22.19 $ SLS_DEBUG=* serverless offline --host 0.0.0.0 --httpPort 3003 --lambdaPort=3019 ... offline: Offline [http for lambda] listening on http://0.0.0.0:3019 offline: Function names exposed for local invocation by aws-sdk: * authEndpoint: serverless-express-auth-dev-authEndpoint * hello: serverless-express-auth-dev-hello [offline] Lambda Invocation Routes (for AWS SDK or AWS CLI): * POST http://0.0.0.0:3019/2015-03-31/functions/serverless-express-auth-dev-authEndpoint/invocations * POST http://0.0.0.0:3019/2015-03-31/functions/serverless-express-auth-dev-hello/invocations [offline] Lambda Async Invocation Routes (for AWS SDK or AWS CLI): * POST http://0.0.0.0:3019/2014-11-13/functions/serverless-express-auth-dev-authEndpoint/invoke-async/ * POST http://0.0.0.0:3019/2014-11-13/functions/serverless-express-auth-dev-hello/invoke-async/ offline: Configuring Authorization: hello authEndpoint [offline] Creating Authorization scheme for hello-authEndpoint-GET-hello \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 GET | http://0.0.0.0:3003/dev/hello \u2502 \u2502 POST | http://0.0.0.0:3003/2015-03-31/functions/hello/invocations \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 offline: [HTTP] server ready: http://0.0.0.0:3003 \ud83d\ude80 offline: offline: Enter \"rp\" to replay the last request","title":"Step 3. Run serverless-express-auth locally"},{"location":"implementation-guide/tutorials/api-gateway/#step-4-run-vue-ui-locally","text":"cd tutorials/api-gateway/vue-ui yarn yarn serve Sample Output yarn run v1.22.19 $ vue-cli-service serve Browserslist: caniuse-lite is outdated. Please run: npx browserslist@latest --update-db Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating INFO Starting development server... Starting type checking service... Using 1 worker with 2048MB memory limit 98% after emitting CopyPlugin DONE Compiled successfully in 1638ms 3:42:04 PM No type errors found Version: typescript 4.2.4 Time: 1111ms App running at: - Local: http://localhost:8080/ - Network: http://localhost:8080/ Note that the development build is not optimized. To create a production build, run yarn build.","title":"Step 4. Run Vue UI locally"},{"location":"implementation-guide/tutorials/api-gateway/#step-5-validate-the-user-permissions","text":"A common scenario is, different users have different permissions to perform an action (allow/deny). We have built in two different users, user1 is allowed to call API GW while user2 is not. Users: user password realm role desription user1 user1 call-api user1 is permited to call api gateway user2 user2 - user2 is not permited to call api gateway Log in to the Vue UI console, such as http://localhost:8080/ . Choose Login . Enter user1 to Username or email, enter user1 to Password. Choose Sign In . Choose Request , you will get the following response message, the response will be successfully. { \"url\": \"http://localhost:3003/dev/hello\", \"status\": 200, \"statusText\": \"OK\", \"data\": { \"message\": \"Hello World from protect server\" } } Choose Logout . Enter user2 to Username or email, enter user2 to Password. Choose Sign In . Choose Request , you will get the following response message, the response will fail. { \"url\": \"http://localhost:3003/dev/hello\", \"status\": 401, \"statusText\": \"Unauthorized\", \"data\": { \"statusCode\": 401, \"error\": \"Unauthorized\", \"message\": \"Unauthorized\" } }","title":"Step 5. Validate the User Permissions"},{"location":"implementation-guide/tutorials/api-gateway/#faq","text":"1. How to export Keycloak realm users? Run the following command to export Keycloak realm users: $ docker exec <container id> $ /opt/jboss/keycloak/bin/standalone.sh -Dkeycloak.migration.action=export -Dkeycloak.migration.realmName=keycloak-on-aws -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=realm-export.json -Djboss.socket.binding.port-offset=99 For more information, refer to https://stackoverflow.com/questions/60766292/how-to-get-keycloak-to-export-realm-users-and-then-exit .","title":"FAQ"}]}